---
 db/sqlite/migrations/01_init/migration.sql |  95 +++++++++++++++++++
 db/sqlite/migrations/migration_lock.toml   |   3 +
 db/sqlite/schema.prisma                    | 104 +++++++++++++++++++++
 lib/db.js                                  |   7 +-
 lib/prisma.js                              |  77 ++++++++++++++-
 scripts/check-db.js                        |  11 +++
 scripts/copy-db-files.js                   |   6 +-
 7 files changed, 296 insertions(+), 7 deletions(-)
 create mode 100644 db/sqlite/migrations/01_init/migration.sql
 create mode 100644 db/sqlite/migrations/migration_lock.toml
 create mode 100644 db/sqlite/schema.prisma

diff --git a/db/sqlite/migrations/01_init/migration.sql b/db/sqlite/migrations/01_init/migration.sql
new file mode 100644
index 00000000..52f643c1
--- /dev/null
+++ b/db/sqlite/migrations/01_init/migration.sql
@@ -0,0 +1,95 @@
+-- CreateTable
+CREATE TABLE `account` (
+    `user_id` INTEGER PRIMARY KEY NOT NULL,
+    `account_uuid` TEXT NOT NULL,
+    `username` TEXT NOT NULL,
+    `password` TEXT NOT NULL,
+    `is_admin` INTEGER NOT NULL DEFAULT 0,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL DEFAULT (strftime('%s', 'now'))
+);
+CREATE UNIQUE INDEX `username` ON `account`(`username`);
+CREATE UNIQUE INDEX `account_account_uuid_key` ON `account`(`account_uuid`);
+CREATE INDEX `account_account_uuid_idx` ON `account`(`account_uuid`);
+
+CREATE TABLE `event`
+(
+    `event_id` INTEGER PRIMARY KEY NOT NULL,
+    `event_uuid` TEXT NOT NULL,
+    `website_id` INTEGER NOT NULL,
+    `session_id` INTEGER NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `url` TEXT NOT NULL,
+    `event_name` TEXT NOT NULL,
+
+    FOREIGN KEY (`session_id`) REFERENCES `session`(`session_id`) ON DELETE RESTRICT ON UPDATE CASCADE,
+    FOREIGN KEY (`website_id`) REFERENCES `website`(`website_id`) ON DELETE RESTRICT ON UPDATE CASCADE
+);
+CREATE INDEX `event_created_at_idx` ON `event`(`created_at`);
+CREATE INDEX `event_session_id_idx` ON `event`(`session_id`);
+CREATE INDEX `event_website_id_idx` ON `event`(`website_id`);
+CREATE UNIQUE INDEX `event_event_uuid_key` ON `event`(`event_uuid`);
+CREATE INDEX `event_event_uuid_idx` ON `event`(`event_uuid`);
+
+CREATE TABLE `event_data` (
+    `event_data_id` INTEGER PRIMARY KEY NOT NULL,
+    `event_id` INTEGER NOT NULL,
+    `event_data` TEXT NOT NULL
+);
+CREATE UNIQUE INDEX `event_data_event_id_key` ON `event_data`(`event_id`);
+
+-- CreateTable
+CREATE TABLE `pageview` (
+    `view_id` INTEGER PRIMARY KEY NOT NULL,
+    `website_id` INTEGER NOT NULL,
+    `session_id` INTEGER NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `url` TEXT NOT NULL,
+    `referrer` TEXT NULL,
+
+    FOREIGN KEY (`session_id`) REFERENCES `session`(`session_id`) ON DELETE RESTRICT ON UPDATE CASCADE,
+    FOREIGN KEY (`website_id`) REFERENCES `website`(`website_id`) ON DELETE RESTRICT ON UPDATE CASCADE
+);
+CREATE INDEX `pageview_created_at_idx` ON `pageview`(`created_at`);
+CREATE INDEX `pageview_session_id_idx` ON `pageview`(`session_id`);
+CREATE INDEX `pageview_website_id_created_at_idx` ON `pageview`(`website_id`, `created_at`);
+CREATE INDEX `pageview_website_id_idx` ON `pageview`(`website_id`);
+CREATE INDEX `pageview_website_id_session_id_created_at_idx` ON `pageview`(`website_id`, `session_id`, `created_at`);
+
+-- CreateTable
+CREATE TABLE `session` (
+    `session_id` INTEGER PRIMARY KEY NOT NULL,
+    `session_uuid` TEXT NOT NULL,
+    `website_id` INTEGER NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `hostname` TEXT NULL,
+    `browser` TEXT NULL,
+    `os` TEXT NULL,
+    `device` TEXT NULL,
+    `screen` TEXT NULL,
+    `language` TEXT NULL,
+    `country` TEXT NULL,
+
+    FOREIGN KEY (`website_id`) REFERENCES `website`(`website_id`) ON DELETE RESTRICT ON UPDATE CASCADE
+);
+CREATE UNIQUE INDEX `session_uuid` ON `session`(`session_uuid`);
+CREATE INDEX `session_created_at_idx` ON `session`(`created_at`);
+CREATE INDEX `session_website_id_idx` ON `session`(`website_id`);
+CREATE INDEX `session_session_uuid_idx` ON `session`(`session_uuid`);
+
+-- CreateTable
+CREATE TABLE `website` (
+    `website_id` INTEGER PRIMARY KEY NOT NULL,
+    `website_uuid` TEXT NOT NULL,
+    `user_id` INTEGER NOT NULL,
+    `name` TEXT NOT NULL,
+    `domain` TEXT NULL,
+    `share_id` TEXT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+
+    FOREIGN KEY (`user_id`) REFERENCES `account`(`user_id`) ON DELETE RESTRICT ON UPDATE CASCADE
+);
+CREATE UNIQUE INDEX `website_uuid` ON `website`(`website_uuid`);
+CREATE UNIQUE INDEX `share_id` ON `website`(`share_id`);
+CREATE INDEX `website_user_id_idx` ON `website`(`user_id`);
+CREATE INDEX `website_website_uuid_idx` ON `website`(`website_uuid`);
\ No newline at end of file
diff --git a/db/sqlite/migrations/migration_lock.toml b/db/sqlite/migrations/migration_lock.toml
new file mode 100644
index 00000000..e5e5c470
--- /dev/null
+++ b/db/sqlite/migrations/migration_lock.toml
@@ -0,0 +1,3 @@
+# Please do not edit this file manually
+# It should be added in your version-control system (i.e. Git)
+provider = "sqlite"
\ No newline at end of file
diff --git a/db/sqlite/schema.prisma b/db/sqlite/schema.prisma
new file mode 100644
index 00000000..014d0d40
--- /dev/null
+++ b/db/sqlite/schema.prisma
@@ -0,0 +1,104 @@
+generator client {
+  provider = "prisma-client-js"
+  previewFeatures = ["clientExtensions"]
+}
+
+datasource db {
+  provider = "sqlite"
+  url      = env("DATABASE_URL")
+}
+
+model account {
+  id          Int       @id @default(autoincrement()) @map("user_id")
+  username    String    @unique()
+  password    String
+  isAdmin     Boolean   @default(false) @map("is_admin")
+  createdAt   Int?      @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  updatedAt   Int?      @default(dbgenerated("strftime('%s','now')")) @map("updated_at")
+  accountUuid String    @unique() @map("account_uuid")
+  website     website[]
+
+  @@index([accountUuid])
+}
+
+model event {
+  id        Int        @id @default(autoincrement()) @map("event_id")
+  websiteId Int        @map("website_id")
+  sessionId Int        @map("session_id")
+  createdAt Int?       @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  url       String
+  eventName String     @map("event_name")
+  eventUuid String     @unique() @map("event_uuid")
+  session   session    @relation(fields: [sessionId], references: [id])
+  website   website    @relation(fields: [websiteId], references: [id])
+  eventData eventData?
+
+  @@index([createdAt])
+  @@index([sessionId])
+  @@index([websiteId])
+  @@index([eventUuid])
+}
+
+model eventData {
+  id        Int    @id @default(autoincrement()) @map("event_data_id")
+  eventId   Int    @unique @map("event_id")
+  eventData String @map("event_data")
+  event     event  @relation(fields: [eventId], references: [id])
+
+  @@map("event_data")
+}
+
+model pageview {
+  id        Int     @id @default(autoincrement()) @map("view_id")
+  websiteId Int     @map("website_id")
+  sessionId Int     @map("session_id")
+  createdAt Int?    @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  url       String
+  referrer  String?
+  session   session @relation(fields: [sessionId], references: [id])
+  website   website @relation(fields: [websiteId], references: [id])
+
+  @@index([createdAt])
+  @@index([sessionId])
+  @@index([websiteId, createdAt])
+  @@index([websiteId])
+  @@index([websiteId, sessionId, createdAt])
+}
+
+model session {
+  id          Int        @id @default(autoincrement()) @map("session_id")
+  sessionUuid String     @unique() @map("session_uuid")
+  websiteId   Int        @map("website_id")
+  createdAt   Int?       @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  hostname    String?
+  browser     String?
+  os          String?
+  device      String?
+  screen      String?
+  language    String?
+  country     String?
+  website     website    @relation(fields: [websiteId], references: [id])
+  event       event[]
+  pageview    pageview[]
+
+  @@index([createdAt])
+  @@index([websiteId])
+  @@index([sessionUuid])
+}
+
+model website {
+  id          Int        @id @default(autoincrement()) @map("website_id")
+  websiteUuid String     @unique() @map("website_uuid")
+  userId      Int        @map("user_id")
+  name        String
+  domain      String?
+  shareId     String?    @unique() @map("share_id")
+  createdAt   Int?       @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  account     account    @relation(fields: [userId], references: [id])
+  event       event[]
+  pageview    pageview[]
+  session     session[]
+
+  @@index([userId])
+  @@index([websiteUuid])
+}
diff --git a/lib/db.js b/lib/db.js
index e58a18c8..eccf5152 100644
--- a/lib/db.js
+++ b/lib/db.js
@@ -1,6 +1,7 @@
 export const PRISMA = 'prisma';
 export const POSTGRESQL = 'postgresql';
 export const MYSQL = 'mysql';
+export const SQLITE = 'sqlite'
 export const CLICKHOUSE = 'clickhouse';
 export const KAFKA = 'kafka';
 export const KAFKA_PRODUCER = 'kafka-producer';
@@ -17,6 +18,10 @@ export function getDatabaseType(url = process.env.DATABASE_URL) {
   if (type === 'postgres') {
     return POSTGRESQL;
   }
+  
+  if (type === 'file') {
+    return SQLITE;
+  }
 
   return type;
 }
@@ -24,7 +29,7 @@ export function getDatabaseType(url = process.env.DATABASE_URL) {
 export async function runQuery(queries) {
   const db = getDatabaseType(process.env.CLICKHOUSE_URL || process.env.DATABASE_URL);
 
-  if (db === POSTGRESQL || db === MYSQL) {
+  if (db === POSTGRESQL || db === MYSQL || db === SQLITE) {
     return queries[PRISMA]();
   }
 
diff --git a/lib/prisma.js b/lib/prisma.js
index 27602ff5..888dc0eb 100644
--- a/lib/prisma.js
+++ b/lib/prisma.js
@@ -2,7 +2,7 @@ import { PrismaClient } from '@prisma/client';
 import chalk from 'chalk';
 import moment from 'moment-timezone';
 import debug from 'debug';
-import { PRISMA, MYSQL, POSTGRESQL, getDatabaseType } from 'lib/db';
+import { PRISMA, MYSQL, POSTGRESQL, SQLITE, getDatabaseType } from 'lib/db';
 import { FILTER_IGNORED } from 'lib/constants';
 
 const MYSQL_DATE_FORMATS = {
@@ -21,6 +21,14 @@ const POSTGRESQL_DATE_FORMATS = {
   year: 'YYYY-01-01',
 };
 
+const SQLITE_DATE_FORMATS = {
+  minute: '%Y-%m-%d %H:%M:00',
+  hour: '%Y-%m-%d %H:00:00',
+  day: '%Y-%m-%d',
+  month: '%Y-%m-01',
+  year: '%Y-01-01',
+};
+
 const log = debug('umami:prisma');
 
 const PRISMA_OPTIONS = {
@@ -43,18 +51,53 @@ function toUuid() {
     return '::uuid';
   }
 
-  if (db === MYSQL) {
+  if (db === MYSQL || db === SQLITE) {
     return '';
   }
 }
 
 function getClient(options) {
-  const prisma = new PrismaClient(options);
+  let prisma = new PrismaClient(options);
 
   if (process.env.LOG_QUERY) {
     prisma.$on('query', logQuery);
   }
 
+  if(getDatabaseType() === SQLITE) {
+    prisma = prisma.$extends({
+      query: {
+        event: {
+          async create({ model, operation, args, query }) {
+            if(args.data.hasOwnProperty('eventData')){
+              args.data.eventData.create.eventData = JSON.stringify(args.data.eventData.create.eventData);
+            }
+            return query(args);
+          },
+        },
+        $allModels: {
+          async findMany({ model, operation, args, query }) {
+            try {
+              typeof args.where.createdAt.gte;
+              args.where.createdAt.gte = Math.floor(args.where.createdAt.gte.getTime() / 1000);
+            } catch {}
+            let results = await query(args);
+            if(results.length) {
+              results.forEach((result,index) => {
+                if(result.hasOwnProperty('createdAt')){
+                  results[index].createdAt = new Date(result.createdAt * 1000).toISOString();
+                }
+                if(result.hasOwnProperty('updatedAt')){
+                  results[index].updatedAt = new Date(result.updatedAt * 1000).toISOString();
+                }
+              });
+            }
+            return results;
+          }
+        }
+      }
+    });
+  }
+
   if (process.env.NODE_ENV !== 'production') {
     global[PRISMA] = prisma;
   }
@@ -83,6 +126,14 @@ function getDateQuery(field, unit, timezone) {
 
     return `date_format(${field}, '${MYSQL_DATE_FORMATS[unit]}')`;
   }
+  
+  if (db === SQLITE) {
+    if(timezone) {
+      const tz = moment.tz(timezone).format('Z').substring(0,3);
+      return `strftime('${SQLITE_DATE_FORMATS[unit]}', ${field}, 'unixepoch', '${tz} hours')`;
+    }
+    return `strftime('${SQLITE_DATE_FORMATS[unit]}', ${field}, 'unixepoch')`;
+  }
 }
 
 function getTimestampInterval(field) {
@@ -95,6 +146,10 @@ function getTimestampInterval(field) {
   if (db === MYSQL) {
     return `floor(unix_timestamp(max(${field})) - unix_timestamp(min(${field})))`;
   }
+  
+  if (db === SQLITE) {
+    return `max(${field}) - min(${field})`;
+  }
 }
 
 function getSanitizedColumns(columns) {
@@ -125,6 +180,10 @@ function getJsonField(column, property, isNumber, params) {
   if (db === MYSQL) {
     return `${column} ->> '$.${property}'`;
   }
+
+  if (db === SQLITE) {
+    return `json_extract(${column},'$.${property}')`;
+  }
 }
 
 function getEventDataColumnsQuery(column, columns, params) {
@@ -259,11 +318,19 @@ function parseFilters(table, column, filters = {}, params = [], sessionKey = 'se
 async function rawQuery(query, params = []) {
   const db = getDatabaseType(process.env.DATABASE_URL);
 
-  if (db !== POSTGRESQL && db !== MYSQL) {
+  if (db !== POSTGRESQL && db !== MYSQL && db !== SQLITE) {
     return Promise.reject(new Error('Unknown database.'));
   }
 
-  const sql = db === MYSQL ? query.replace(/\$[0-9]+/g, '?') : query;
+  const sql = db !== POSTGRESQL ? query.replace(/\$[0-9]+/g, '?') : query;
+
+  if (db === SQLITE) {
+    params.forEach((param, index) => {
+      if (param instanceof Date) {
+        params[index] = Math.floor(param.getTime() / 1000);
+      }
+    });
+  }
 
   return prisma.$queryRawUnsafe.apply(prisma, [sql, ...params]);
 }
diff --git a/scripts/check-db.js b/scripts/check-db.js
index d5cc2a64..123556dd 100644
--- a/scripts/check-db.js
+++ b/scripts/check-db.js
@@ -48,6 +48,17 @@ async function checkTables() {
     console.log('Adding tables...');
 
     console.log(execSync('prisma migrate deploy').toString());
+    const { hashPassword } = require('next-basics');
+    const { v4 } = require('uuid');
+    console.log('Adding admin user...');
+    await prisma.account.create({
+      data: {
+        username: 'admin',
+        password: hashPassword('umami'),
+        accountUuid: v4(),
+        isAdmin: true,
+      }
+    });
   }
 }
 
diff --git a/scripts/copy-db-files.js b/scripts/copy-db-files.js
index 3e902d45..936c31a6 100644
--- a/scripts/copy-db-files.js
+++ b/scripts/copy-db-files.js
@@ -10,12 +10,16 @@ function getDatabaseType(url = process.env.DATABASE_URL) {
     return 'postgresql';
   }
 
+  if (type === 'file') {
+    return 'sqlite';
+  }
+
   return type;
 }
 
 const databaseType = getDatabaseType();
 
-if (!databaseType || !['mysql', 'postgresql'].includes(databaseType)) {
+if (!databaseType || !['mysql', 'postgresql', 'sqlite'].includes(databaseType)) {
   throw new Error('Missing or invalid database');
 }
 
-- 

---
 db/sqlite/migrations/01_init/migration.sql | 127 +++++++++++++++++
 db/sqlite/migrations/migration_lock.toml   |   3 +
 db/sqlite/schema.prisma                    | 158 +++++++++++++++++++++
 lib/db.js                                  |   7 +-
 lib/prisma-client.ts                       | 145 +++++++++++++++++++
 lib/prisma.ts                              |  30 +++-
 scripts/check-db.js                        |  30 ++--
 scripts/copy-db-files.js                   |   6 +-
 8 files changed, 487 insertions(+), 19 deletions(-)
 create mode 100644 db/sqlite/migrations/01_init/migration.sql
 create mode 100644 db/sqlite/migrations/migration_lock.toml
 create mode 100644 db/sqlite/schema.prisma
 create mode 100644 lib/prisma-client.ts

diff --git a/db/sqlite/migrations/01_init/migration.sql b/db/sqlite/migrations/01_init/migration.sql
new file mode 100644
index 00000000..57c1fd1b
--- /dev/null
+++ b/db/sqlite/migrations/01_init/migration.sql
@@ -0,0 +1,127 @@
+-- CreateTable
+CREATE TABLE `user` (
+    `user_id` TEXT PRIMARY KEY NOT NULL,
+    `username` TEXT NOT NULL,
+    `password` TEXT NOT NULL,
+    `role` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL,
+    `deleted_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `user_user_id_key` ON `user`(`user_id`);
+CREATE UNIQUE INDEX `user_username_key` ON `user`(`username`);
+
+-- CreateTable
+CREATE TABLE `session` (
+    `session_id` TEXT PRIMARY KEY NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `hostname` TEXT NULL,
+    `browser` TEXT NULL,
+    `os` TEXT NULL,
+    `device` TEXT NULL,
+    `screen` TEXT NULL,
+    `language` TEXT NULL,
+    `country` TEXT NULL,
+    `subdivision1` TEXT NULL,
+    `subdivision2` TEXT NULL,
+    `city` TEXT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now'))
+);
+CREATE UNIQUE INDEX `session_session_id_key` ON `session`(`session_id`);
+CREATE INDEX `session_created_at_idx` ON `session`(`created_at`);
+CREATE INDEX `session_website_id_idx` ON `session`(`website_id`);
+
+-- CreateTable
+CREATE TABLE `website` (
+    `website_id` TEXT PRIMARY KEY NOT NULL,
+    `name` TEXT NOT NULL,
+    `domain` TEXT NULL,
+    `share_id` TEXT NULL,
+    `reset_at` INTEGER NULL,
+    `user_id` TEXT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL,
+    `deleted_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `website_website_id_key` ON `website`(`website_id`);
+CREATE UNIQUE INDEX `website_share_id_key` ON `website`(`share_id`);
+CREATE INDEX `website_user_id_idx` ON `website`(`user_id`);
+CREATE INDEX `website_created_at_idx` ON `website`(`created_at`);
+CREATE INDEX `website_share_id_idx` ON `website`(`share_id`);
+
+-- CreateTable
+CREATE TABLE `website_event` (
+    `event_id` TEXT PRIMARY KEY NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `session_id` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `url_path` TEXT NOT NULL,
+    `url_query` TEXT NULL,
+    `referrer_path` TEXT NULL,
+    `referrer_query` TEXT NULL,
+    `referrer_domain` TEXT NULL,
+    `page_title` TEXT NULL,
+    `event_type` INTEGER UNSIGNED NOT NULL DEFAULT 1,
+    `event_name` TEXT NULL
+);
+CREATE INDEX `website_event_created_at_idx` ON `website_event`(`created_at`);
+CREATE INDEX `website_event_session_id_idx` ON `website_event`(`session_id`);
+CREATE INDEX `website_event_website_id_idx` ON `website_event`(`website_id`);
+CREATE INDEX `website_event_website_id_created_at_idx` ON `website_event`(`website_id`, `created_at`);
+CREATE INDEX `website_event_website_id_session_id_created_at_idx` ON `website_event`(`website_id`, `session_id`, `created_at`);
+
+-- CreateTable
+CREATE TABLE `event_data` (
+    `event_id` TEXT PRIMARY KEY NOT NULL,
+    `website_event_id` TEXT NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `event_key` TEXT NOT NULL,
+    `event_string_value` TEXT NULL,
+    `event_numeric_value` NUMERIC NULL,
+    `event_date_value` INTEGER NULL,
+    `event_data_type` INTEGER UNSIGNED NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now'))
+);
+CREATE INDEX `event_data_created_at_idx` ON `event_data`(`created_at`);
+CREATE INDEX `event_data_website_id_idx` ON `event_data`(`website_id`);
+CREATE INDEX `event_data_website_event_id_idx` ON `event_data`(`website_event_id`);
+CREATE INDEX `event_data_website_id_website_event_id_created_at_idx` ON `event_data`(`website_id`, `website_event_id`, `created_at`);
+
+-- CreateTable
+CREATE TABLE `team` (
+    `team_id` TEXT PRIMARY KEY NOT NULL,
+    `name` TEXT NOT NULL,
+    `access_code` TEXT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `team_team_id_key` ON `team`(`team_id`);
+CREATE UNIQUE INDEX `team_access_code_key` ON `team`(`access_code`);
+CREATE INDEX `team_access_code_idx` ON `team`(`access_code`);
+
+-- CreateTable
+CREATE TABLE `team_user` (
+    `team_user_id` TEXT PRIMARY KEY NOT NULL,
+    `team_id` TEXT NOT NULL,
+    `user_id` TEXT NOT NULL,
+    `role` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `team_user_team_user_id_key` ON `team_user`(`team_user_id`);
+CREATE INDEX `team_user_team_id_idx` ON `team_user`(`team_id`);
+CREATE INDEX `team_user_user_id_idx` ON `team_user`(`user_id`);
+
+-- CreateTable
+CREATE TABLE `team_website` (
+    `team_website_id` TEXT PRIMARY KEY NOT NULL,
+    `team_id` TEXT NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now'))
+);
+CREATE UNIQUE INDEX `team_website_team_website_id_key` ON `team_website`(`team_website_id`);
+CREATE INDEX `team_website_team_id_idx` ON `team_website`(`team_id`);
+CREATE INDEX `team_website_website_id_idx` ON `team_website`(`website_id`);
+
+-- AddSystemUser
+INSERT INTO user (user_id, username, role, password) VALUES ('41e2b680-648e-4b09-bcd7-3e2b10c06264' , 'admin', 'admin', '$2b$10$BUli0c.muyCW1ErNJc3jL.vFRFtFJWrT8/GcR4A.sUdCznaXiqFXa');
\ No newline at end of file
diff --git a/db/sqlite/migrations/migration_lock.toml b/db/sqlite/migrations/migration_lock.toml
new file mode 100644
index 00000000..e5e5c470
--- /dev/null
+++ b/db/sqlite/migrations/migration_lock.toml
@@ -0,0 +1,3 @@
+# Please do not edit this file manually
+# It should be added in your version-control system (i.e. Git)
+provider = "sqlite"
\ No newline at end of file
diff --git a/db/sqlite/schema.prisma b/db/sqlite/schema.prisma
new file mode 100644
index 00000000..d81ea6f0
--- /dev/null
+++ b/db/sqlite/schema.prisma
@@ -0,0 +1,158 @@
+generator client {
+  provider        = "prisma-client-js"
+  previewFeatures = ["clientExtensions"]
+}
+
+datasource db {
+  provider     = "sqlite"
+  url          = env("DATABASE_URL")
+  relationMode = "prisma"
+}
+
+model User {
+  id        String @id @unique @map("user_id")
+  username  String @unique
+  password  String
+  role      String @map("role")
+  createdAt Int?   @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  updatedAt Int?   @map("updated_at")
+  deletedAt Int?   @map("deleted_at")
+
+  website  Website[]
+  teamUser TeamUser[]
+
+  @@map("user")
+}
+
+model Session {
+  id           String  @id @unique @map("session_id")
+  websiteId    String  @map("website_id")
+  hostname     String?
+  browser      String?
+  os           String?
+  device       String?
+  screen       String?
+  language     String?
+  country      String?
+  subdivision1 String?
+  subdivision2 String?
+  city         String?
+  createdAt    Int?    @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+
+  websiteEvent WebsiteEvent[]
+
+  @@index([createdAt])
+  @@index([websiteId])
+  @@map("session")
+}
+
+model Website {
+  id        String  @id @unique @map("website_id")
+  name      String
+  domain    String?
+  shareId   String? @unique @map("share_id")
+  resetAt   Int?    @map("reset_at")
+  userId    String? @map("user_id")
+  createdAt Int?    @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  updatedAt Int?    @map("updated_at")
+  deletedAt Int?    @map("deleted_at")
+
+  user        User?         @relation(fields: [userId], references: [id])
+  teamWebsite TeamWebsite[]
+  eventData   EventData[]
+
+  @@index([userId])
+  @@index([createdAt])
+  @@index([shareId])
+  @@map("website")
+}
+
+model WebsiteEvent {
+  id             String  @id() @map("event_id")
+  websiteId      String  @map("website_id")
+  sessionId      String  @map("session_id")
+  createdAt      Int?    @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  urlPath        String  @map("url_path")
+  urlQuery       String? @map("url_query")
+  referrerPath   String? @map("referrer_path")
+  referrerQuery  String? @map("referrer_query")
+  referrerDomain String? @map("referrer_domain")
+  pageTitle      String? @map("page_title")
+  eventType      Int     @default(1) @map("event_type")
+  eventName      String? @map("event_name")
+
+  eventData EventData[]
+  session   Session     @relation(fields: [sessionId], references: [id])
+
+  @@index([createdAt])
+  @@index([sessionId])
+  @@index([websiteId])
+  @@index([websiteId, createdAt])
+  @@index([websiteId, sessionId, createdAt])
+  @@map("website_event")
+}
+
+model EventData {
+  id                String   @id() @map("event_id")
+  websiteEventId    String   @map("website_event_id")
+  websiteId         String   @map("website_id")
+  eventKey          String   @map("event_key")
+  eventStringValue  String?  @map("event_string_value")
+  eventNumericValue Decimal? @map("event_numeric_value")
+  eventDateValue    Int?     @map("event_date_value")
+  eventDataType     Int      @map("event_data_type")
+  createdAt         Int?     @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+
+  website      Website      @relation(fields: [websiteId], references: [id])
+  websiteEvent WebsiteEvent @relation(fields: [websiteEventId], references: [id])
+
+  @@index([createdAt])
+  @@index([websiteId])
+  @@index([websiteEventId])
+  @@index([websiteId, websiteEventId, createdAt])
+  @@map("event_data")
+}
+
+model Team {
+  id         String  @id() @unique() @map("team_id")
+  name       String
+  accessCode String? @unique @map("access_code")
+  createdAt  Int?    @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  updatedAt  Int?    @map("updated_at")
+
+  teamUser    TeamUser[]
+  teamWebsite TeamWebsite[]
+
+  @@index([accessCode])
+  @@map("team")
+}
+
+model TeamUser {
+  id        String @id() @unique() @map("team_user_id")
+  teamId    String @map("team_id")
+  userId    String @map("user_id")
+  role      String @map("role")
+  createdAt Int?   @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+  updatedAt Int?   @map("updated_at")
+
+  team Team @relation(fields: [teamId], references: [id])
+  user User @relation(fields: [userId], references: [id])
+
+  @@index([teamId])
+  @@index([userId])
+  @@map("team_user")
+}
+
+model TeamWebsite {
+  id        String @id() @unique() @map("team_website_id")
+  teamId    String @map("team_id")
+  websiteId String @map("website_id")
+  createdAt Int?   @default(dbgenerated("strftime('%s','now')")) @map("created_at")
+
+  team    Team    @relation(fields: [teamId], references: [id])
+  website Website @relation(fields: [websiteId], references: [id])
+
+  @@index([teamId])
+  @@index([websiteId])
+  @@map("team_website")
+}
diff --git a/lib/db.js b/lib/db.js
index 19e46a3d..5819ce06 100644
--- a/lib/db.js
+++ b/lib/db.js
@@ -1,6 +1,7 @@
 export const PRISMA = 'prisma';
 export const POSTGRESQL = 'postgresql';
 export const MYSQL = 'mysql';
+export const SQLITE = 'sqlite';
 export const CLICKHOUSE = 'clickhouse';
 export const KAFKA = 'kafka';
 export const KAFKA_PRODUCER = 'kafka-producer';
@@ -17,13 +18,17 @@ export function getDatabaseType(url = process.env.DATABASE_URL) {
     return POSTGRESQL;
   }
 
+  if (type === 'file') {
+    return SQLITE;
+  }
+
   return type;
 }
 
 export async function runQuery(queries) {
   const db = getDatabaseType(process.env.CLICKHOUSE_URL || process.env.DATABASE_URL);
 
-  if (db === POSTGRESQL || db === MYSQL) {
+  if (db === POSTGRESQL || db === MYSQL || db === SQLITE) {
     return queries[PRISMA]();
   }
 
diff --git a/lib/prisma-client.ts b/lib/prisma-client.ts
new file mode 100644
index 00000000..1e7c2ae5
--- /dev/null
+++ b/lib/prisma-client.ts
@@ -0,0 +1,145 @@
+import { PrismaClient } from '@prisma/client';
+import chalk from 'chalk';
+import debug from 'debug';
+import { PrismaClientOptions, RawValue } from '@prisma/client/runtime';
+import { PRISMA, SQLITE, getDatabaseType } from 'lib/db';
+
+const log = debug('umami:prisma-client');
+
+const PRISMA_OPTIONS: PrismaClientOptions = {
+  log: [
+    {
+      emit: 'event',
+      level: 'query',
+    },
+  ],
+};
+
+function logQuery({ params, query, duration }) {
+  log(chalk.yellow(params), '->', query, chalk.greenBright(`${duration}ms`));
+}
+
+function getClient(options: PrismaClientOptions): PrismaClient {
+  let client = new PrismaClient(options);
+
+  if (process.env.LOG_QUERY) {
+    client.$on('query', logQuery);
+  }
+
+  if (getDatabaseType() === SQLITE) {
+    const handleFindMany = ({ args, query }) => {
+      try {
+        typeof args.where.createdAt.gte;
+        args.where.createdAt.gte = Math.floor(args.where.createdAt.gte.getTime() / 1000);
+      } catch(e){}
+      return query(args);
+    };
+
+    const handleUpdate = ({ args, query }) => {
+      args.data.updatedAt = Math.floor( Date.now() / 1000 );
+      return query(args);
+    };
+
+    const handleUpdateDelete = ({ args, query }) => {
+      args.data.updatedAt = Math.floor( Date.now() / 1000 );
+      try {
+        typeof args.data.deletedAt;
+        args.data.deletedAt = Math.floor(args.data.deletedAt.getTime() / 1000);
+      } catch(e){}
+      return query(args);
+    }
+
+    const handleCreateMany = (model, { data: dataArray }) => {
+      return Promise.all(
+        dataArray.map(async (data) => {
+          await client[model].create({
+            data,
+          });
+        })
+      );
+    };
+
+    let queries = {};
+
+    queries.$queryRawUnsafe = ({ args, query }) => {
+      for(let i = args.length ; i > 1; i--){
+        if (args[i] instanceof Date) {
+          args[i] = Math.floor(args[i].getTime() / 1000);
+        }
+      }
+      return query(args);
+    };
+    ['websiteEvent', 'session'].forEach(key => {
+      queries[key] = {
+        findMany: handleFindMany,
+      };
+    });
+    ['user', 'website', 'team', 'teamUser'].forEach(key => {
+      queries[key] = {
+        update: handleUpdate,
+      };
+    });
+    queries.eventData = {
+      create: ({ args, query }) => {
+        if(args.data.eventDateValue) {
+          args.data.eventDateValue = Math.floor(args.data.eventDateValue.getTime() / 1000);
+        }
+        return query(args);
+      },
+    };
+
+    if (process.env.CLOUD_MODE) {
+      queries.user.update = handleUpdateDelete;
+      queries.website.update = handleUpdateDelete;
+      queries.website.updateMany = handleUpdateDelete;
+    }
+
+    client = client.$extends({
+      query: {
+        ...queries,
+      },
+      result: {
+        $allModels: {
+          createdAt: {
+            compute(model) {
+              return model.createdAt * 1000;
+            },
+          },
+          updatedAt: {
+            compute(model) {
+              return (model.updatedAt) ? model.updatedAt * 1000 : null;
+            },
+          },
+        },
+      },
+    });
+    client.eventData.createMany = handleCreateMany.bind(null, 'eventData');
+    client.teamWebsite.createMany = handleCreateMany.bind(null, 'teamWebsite');
+  }
+
+  if (process.env.NODE_ENV !== 'production') {
+    global[PRISMA] = client;
+  }
+
+  log('Prisma initialized');
+
+  return client;
+}
+
+async function rawQuery(query: string, params: RawValue[] = []) {
+  return prisma.$queryRawUnsafe.apply(prisma, [query, ...params]);
+}
+
+async function transaction(input: any, options?: any) {
+  return prisma.$transaction(input, options);
+}
+
+// Initialization
+const prisma: PrismaClient = (global[PRISMA] || getClient(PRISMA_OPTIONS)) as PrismaClient;
+
+export default { client: prisma, log, rawQuery, transaction } as {
+  client: PrismaClient;
+  log: any;
+  rawQuery: (query: string, params: RawValue[]) => Promise<any>;
+  transaction: (input: any, options?: any) => Promise<any>;
+};
\ No newline at end of file
diff --git a/lib/prisma.ts b/lib/prisma.ts
index 0a10d981..9d002142 100644
--- a/lib/prisma.ts
+++ b/lib/prisma.ts
@@ -1,6 +1,6 @@
-import prisma from '@umami/prisma-client';
+import prisma from 'lib/prisma-client';
 import moment from 'moment-timezone';
-import { MYSQL, POSTGRESQL, getDatabaseType } from 'lib/db';
+import { MYSQL, POSTGRESQL, SQLITE, getDatabaseType } from 'lib/db';
 import { getEventDataType } from './eventData';
 import { FILTER_COLUMNS } from './constants';
 
@@ -20,6 +20,14 @@ const POSTGRESQL_DATE_FORMATS = {
   year: 'YYYY-01-01',
 };
 
+const SQLITE_DATE_FORMATS = {
+  minute: '%Y-%m-%d %H:%M:00',
+  hour: '%Y-%m-%d %H:00:00',
+  day: '%Y-%m-%d',
+  month: '%Y-%m-01',
+  year: '%Y-01-01',
+};
+
 function toUuid(): string {
   const db = getDatabaseType(process.env.DATABASE_URL);
 
@@ -27,7 +35,7 @@ function toUuid(): string {
     return '::uuid';
   }
 
-  if (db === MYSQL) {
+  if (db === MYSQL || db === SQLITE) {
     return '';
   }
 }
@@ -51,6 +59,14 @@ function getDateQuery(field: string, unit: string, timezone?: string): string {
 
     return `date_format(${field}, '${MYSQL_DATE_FORMATS[unit]}')`;
   }
+
+  if (db === SQLITE) {
+    if(timezone) {
+      const tz = moment.tz(timezone).format('Z').substring(0,3);
+      return `strftime('${SQLITE_DATE_FORMATS[unit]}', ${field}, 'unixepoch', '${tz} hours')`;
+    }
+    return `strftime('${SQLITE_DATE_FORMATS[unit]}', ${field}, 'unixepoch')`;
+  }
 }
 
 function getTimestampInterval(field: string): string {
@@ -63,6 +79,10 @@ function getTimestampInterval(field: string): string {
   if (db === MYSQL) {
     return `floor(unix_timestamp(max(${field})) - unix_timestamp(min(${field})))`;
   }
+
+  if (db === SQLITE) {
+    return `max(${field}) - min(${field})`;
+  }
 }
 
 function getEventDataFilterQuery(
@@ -141,11 +161,11 @@ function parseFilters(
 async function rawQuery(query: string, params: never[] = []): Promise<any> {
   const db = getDatabaseType(process.env.DATABASE_URL);
 
-  if (db !== POSTGRESQL && db !== MYSQL) {
+  if (db !== POSTGRESQL && db !== MYSQL && db !== SQLITE) {
     return Promise.reject(new Error('Unknown database.'));
   }
 
-  const sql = db === MYSQL ? query.replace(/\$[0-9]+/g, '?') : query;
+  const sql = db !== POSTGRESQL ? query.replace(/\$[0-9]+/g, '?') : query;
 
   return prisma.rawQuery(sql, params);
 }
diff --git a/scripts/check-db.js b/scripts/check-db.js
index 3fd3a908..ae1bba1b 100644
--- a/scripts/check-db.js
+++ b/scripts/check-db.js
@@ -17,10 +17,13 @@ function getDatabaseType(url = process.env.DATABASE_URL) {
     return 'postgresql';
   }
 
+  if (type === 'file') {
+    return 'sqlite';
+  }
+
   return type;
 }
 
-const databaseType = getDatabaseType();
 const prisma = new PrismaClient();
 
 function success(msg) {
@@ -49,19 +52,22 @@ async function checkConnection() {
   }
 }
 
-async function checkDatabaseVersion(databaseType) {
-  const query = await prisma.$queryRaw`select version() as version`;
-  const version = semver.valid(semver.coerce(query[0].version));
+async function checkDatabaseVersion() {
+  const databaseType = getDatabaseType();
+  if (databaseType !== 'sqlite') {
+    const query = await prisma.$queryRaw`select version() as version`;
+    const version = semver.valid(semver.coerce(query[0].version));
 
-  const minVersion = databaseType === 'postgresql' ? '9.4.0' : '5.7.0';
+    const minVersion = databaseType === 'postgresql' ? '9.4.0' : '5.7.0';
 
-  if (semver.lt(version, minVersion)) {
-    throw new Error(
-      `Database version is not compatible. Please upgrade ${databaseType} version to ${minVersion} or greater`,
-    );
-  }
+    if (semver.lt(version, minVersion)) {
+      throw new Error(
+        `Database version is not compatible. Please upgrade ${databaseType} version to ${minVersion} or greater`,
+      );
+    }
 
-  success('Database version check successful.');
+    success('Database version check successful.');
+  }
 }
 
 async function checkV1Tables() {
@@ -87,7 +93,7 @@ async function applyMigration() {
   let err = false;
   for (let fn of [checkEnv, checkConnection, checkDatabaseVersion, checkV1Tables, applyMigration]) {
     try {
-      fn.name === 'checkDatabaseVersion' ? await fn(databaseType) : await fn();
+      await fn();
     } catch (e) {
       error(e.message);
       err = true;
diff --git a/scripts/copy-db-files.js b/scripts/copy-db-files.js
index 15c34674..673db6b6 100644
--- a/scripts/copy-db-files.js
+++ b/scripts/copy-db-files.js
@@ -11,12 +11,16 @@ function getDatabaseType(url = process.env.DATABASE_URL) {
     return 'postgresql';
   }
 
+  if (type === 'file') {
+    return 'sqlite';
+  }
+
   return type;
 }
 
 const databaseType = getDatabaseType();
 
-if (!databaseType || !['mysql', 'postgresql'].includes(databaseType)) {
+if (!databaseType || !['mysql', 'postgresql', 'sqlite'].includes(databaseType)) {
   throw new Error('Missing or invalid database');
 }
 
-- 

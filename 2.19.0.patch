---
 Dockerfile                                    |   3 +
 db/sqlite/migrations/01_init/migration.sql    | 127 +++++++++
 .../02_1_unixepoch_availability/migration.sql |  15 +
 .../migration.sql                             |  49 ++++
 .../03_metric_performance_index/migration.sql |  50 ++++
 .../04_1_indexes_tables/migration.sql         | 206 ++++++++++++++
 .../migrations/04_team_redesign/migration.sql |  31 ++
 .../migrations/05_add_visit_id/migration.sql  |  58 ++++
 .../migrations/06_session_data/migration.sql  |  20 ++
 db/sqlite/migrations/07_add_tag/migration.sql |   5 +
 .../migrations/08_1_datetime/migration.sql    | 145 ++++++++++
 .../migrations/08_add_utm_clid/migration.sql  |  12 +
 .../09_update_hostname_region/migration.sql   |  22 ++
 .../10_add_distinct_id/migration.sql          |   5 +
 .../migrations/11_add_segment/migration.sql   |  16 ++
 .../12_update_report_parameter/migration.sql  |  20 ++
 .../migrations/13_add_revenue/migration.sql   |  26 ++
 db/sqlite/migrations/migration_lock.toml      |   3 +
 db/sqlite/schema.prisma                       | 269 ++++++++++++++++++
 scripts/check-db.js                           |  33 ++-
 scripts/copy-db-files.js                      |   6 +-
 .../convert-utm-clid-columns.js               |  62 ++++
 .../convert-utm-clid-columns.sql              |  49 ----
 .../populate-revenue-table.sql                |  32 +--
 scripts/sqlite-vacuum.js                      |  10 +
 src/lib/db.ts                                 |  17 +-
 src/lib/prisma.ts                             |  58 +++-
 src/queries/prisma/team.ts                    |   5 +-
 src/queries/sql/events/getWebsiteEvents.ts    |   4 +-
 src/queries/sql/getRealtimeActivity.ts        |   4 +-
 src/queries/sql/getWebsiteDateRange.ts        |   6 +-
 src/queries/sql/sessions/getSessionData.ts    |   6 +-
 src/queries/sql/sessions/getWebsiteSession.ts |   6 +-
 .../sql/sessions/getWebsiteSessions.ts        |   8 +-
 34 files changed, 1270 insertions(+), 118 deletions(-)
 create mode 100644 db/sqlite/migrations/01_init/migration.sql
 create mode 100644 db/sqlite/migrations/02_1_unixepoch_availability/migration.sql
 create mode 100644 db/sqlite/migrations/02_report_schema_session_data/migration.sql
 create mode 100644 db/sqlite/migrations/03_metric_performance_index/migration.sql
 create mode 100644 db/sqlite/migrations/04_1_indexes_tables/migration.sql
 create mode 100644 db/sqlite/migrations/04_team_redesign/migration.sql
 create mode 100644 db/sqlite/migrations/05_add_visit_id/migration.sql
 create mode 100644 db/sqlite/migrations/06_session_data/migration.sql
 create mode 100644 db/sqlite/migrations/07_add_tag/migration.sql
 create mode 100644 db/sqlite/migrations/08_1_datetime/migration.sql
 create mode 100644 db/sqlite/migrations/08_add_utm_clid/migration.sql
 create mode 100644 db/sqlite/migrations/09_update_hostname_region/migration.sql
 create mode 100644 db/sqlite/migrations/10_add_distinct_id/migration.sql
 create mode 100644 db/sqlite/migrations/11_add_segment/migration.sql
 create mode 100644 db/sqlite/migrations/12_update_report_parameter/migration.sql
 create mode 100644 db/sqlite/migrations/13_add_revenue/migration.sql
 create mode 100644 db/sqlite/migrations/migration_lock.toml
 create mode 100644 db/sqlite/schema.prisma
 create mode 100644 scripts/data-migrations/convert-utm-clid-columns.js
 delete mode 100644 scripts/data-migrations/convert-utm-clid-columns.sql
 create mode 100644 scripts/sqlite-vacuum.js

diff --git a/Dockerfile b/Dockerfile
index 4b156643..c3ddf4cf 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -58,6 +58,9 @@ COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
 # Custom routes
 RUN mv ./.next/routes-manifest.json ./.next/routes-manifest-orig.json
 
+RUN mkdir /db \
+    && chown nextjs:nodejs /db
+
 USER nextjs
 
 EXPOSE 3000
diff --git a/db/sqlite/migrations/01_init/migration.sql b/db/sqlite/migrations/01_init/migration.sql
new file mode 100644
index 00000000..57c1fd1b
--- /dev/null
+++ b/db/sqlite/migrations/01_init/migration.sql
@@ -0,0 +1,127 @@
+-- CreateTable
+CREATE TABLE `user` (
+    `user_id` TEXT PRIMARY KEY NOT NULL,
+    `username` TEXT NOT NULL,
+    `password` TEXT NOT NULL,
+    `role` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL,
+    `deleted_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `user_user_id_key` ON `user`(`user_id`);
+CREATE UNIQUE INDEX `user_username_key` ON `user`(`username`);
+
+-- CreateTable
+CREATE TABLE `session` (
+    `session_id` TEXT PRIMARY KEY NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `hostname` TEXT NULL,
+    `browser` TEXT NULL,
+    `os` TEXT NULL,
+    `device` TEXT NULL,
+    `screen` TEXT NULL,
+    `language` TEXT NULL,
+    `country` TEXT NULL,
+    `subdivision1` TEXT NULL,
+    `subdivision2` TEXT NULL,
+    `city` TEXT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now'))
+);
+CREATE UNIQUE INDEX `session_session_id_key` ON `session`(`session_id`);
+CREATE INDEX `session_created_at_idx` ON `session`(`created_at`);
+CREATE INDEX `session_website_id_idx` ON `session`(`website_id`);
+
+-- CreateTable
+CREATE TABLE `website` (
+    `website_id` TEXT PRIMARY KEY NOT NULL,
+    `name` TEXT NOT NULL,
+    `domain` TEXT NULL,
+    `share_id` TEXT NULL,
+    `reset_at` INTEGER NULL,
+    `user_id` TEXT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL,
+    `deleted_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `website_website_id_key` ON `website`(`website_id`);
+CREATE UNIQUE INDEX `website_share_id_key` ON `website`(`share_id`);
+CREATE INDEX `website_user_id_idx` ON `website`(`user_id`);
+CREATE INDEX `website_created_at_idx` ON `website`(`created_at`);
+CREATE INDEX `website_share_id_idx` ON `website`(`share_id`);
+
+-- CreateTable
+CREATE TABLE `website_event` (
+    `event_id` TEXT PRIMARY KEY NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `session_id` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `url_path` TEXT NOT NULL,
+    `url_query` TEXT NULL,
+    `referrer_path` TEXT NULL,
+    `referrer_query` TEXT NULL,
+    `referrer_domain` TEXT NULL,
+    `page_title` TEXT NULL,
+    `event_type` INTEGER UNSIGNED NOT NULL DEFAULT 1,
+    `event_name` TEXT NULL
+);
+CREATE INDEX `website_event_created_at_idx` ON `website_event`(`created_at`);
+CREATE INDEX `website_event_session_id_idx` ON `website_event`(`session_id`);
+CREATE INDEX `website_event_website_id_idx` ON `website_event`(`website_id`);
+CREATE INDEX `website_event_website_id_created_at_idx` ON `website_event`(`website_id`, `created_at`);
+CREATE INDEX `website_event_website_id_session_id_created_at_idx` ON `website_event`(`website_id`, `session_id`, `created_at`);
+
+-- CreateTable
+CREATE TABLE `event_data` (
+    `event_id` TEXT PRIMARY KEY NOT NULL,
+    `website_event_id` TEXT NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `event_key` TEXT NOT NULL,
+    `event_string_value` TEXT NULL,
+    `event_numeric_value` NUMERIC NULL,
+    `event_date_value` INTEGER NULL,
+    `event_data_type` INTEGER UNSIGNED NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now'))
+);
+CREATE INDEX `event_data_created_at_idx` ON `event_data`(`created_at`);
+CREATE INDEX `event_data_website_id_idx` ON `event_data`(`website_id`);
+CREATE INDEX `event_data_website_event_id_idx` ON `event_data`(`website_event_id`);
+CREATE INDEX `event_data_website_id_website_event_id_created_at_idx` ON `event_data`(`website_id`, `website_event_id`, `created_at`);
+
+-- CreateTable
+CREATE TABLE `team` (
+    `team_id` TEXT PRIMARY KEY NOT NULL,
+    `name` TEXT NOT NULL,
+    `access_code` TEXT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `team_team_id_key` ON `team`(`team_id`);
+CREATE UNIQUE INDEX `team_access_code_key` ON `team`(`access_code`);
+CREATE INDEX `team_access_code_idx` ON `team`(`access_code`);
+
+-- CreateTable
+CREATE TABLE `team_user` (
+    `team_user_id` TEXT PRIMARY KEY NOT NULL,
+    `team_id` TEXT NOT NULL,
+    `user_id` TEXT NOT NULL,
+    `role` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now')),
+    `updated_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `team_user_team_user_id_key` ON `team_user`(`team_user_id`);
+CREATE INDEX `team_user_team_id_idx` ON `team_user`(`team_id`);
+CREATE INDEX `team_user_user_id_idx` ON `team_user`(`user_id`);
+
+-- CreateTable
+CREATE TABLE `team_website` (
+    `team_website_id` TEXT PRIMARY KEY NOT NULL,
+    `team_id` TEXT NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (strftime('%s', 'now'))
+);
+CREATE UNIQUE INDEX `team_website_team_website_id_key` ON `team_website`(`team_website_id`);
+CREATE INDEX `team_website_team_id_idx` ON `team_website`(`team_id`);
+CREATE INDEX `team_website_website_id_idx` ON `team_website`(`website_id`);
+
+-- AddSystemUser
+INSERT INTO user (user_id, username, role, password) VALUES ('41e2b680-648e-4b09-bcd7-3e2b10c06264' , 'admin', 'admin', '$2b$10$BUli0c.muyCW1ErNJc3jL.vFRFtFJWrT8/GcR4A.sUdCznaXiqFXa');
\ No newline at end of file
diff --git a/db/sqlite/migrations/02_1_unixepoch_availability/migration.sql b/db/sqlite/migrations/02_1_unixepoch_availability/migration.sql
new file mode 100644
index 00000000..4123bbde
--- /dev/null
+++ b/db/sqlite/migrations/02_1_unixepoch_availability/migration.sql
@@ -0,0 +1,15 @@
+-- Update defaults and force schema_version incrementation with an immediatly dropped new table
+BEGIN TRANSACTION;
+PRAGMA writable_schema=ON;
+UPDATE sqlite_schema SET sql='CREATE TABLE `user` ( `user_id` TEXT PRIMARY KEY NOT NULL, `username` TEXT NOT NULL, `password` TEXT NOT NULL, `role` TEXT NOT NULL, `created_at` INTEGER NULL DEFAULT (unixepoch()), `updated_at` INTEGER NULL, `deleted_at` INTEGER NULL )' WHERE type='table' AND name='user';
+UPDATE sqlite_schema SET sql='CREATE TABLE `session` ( `session_id` TEXT PRIMARY KEY NOT NULL, `website_id` TEXT NOT NULL, `hostname` TEXT NULL, `browser` TEXT NULL, `os` TEXT NULL, `device` TEXT NULL, `screen` TEXT NULL, `language` TEXT NULL, `country` TEXT NULL, `subdivision1` TEXT NULL, `subdivision2` TEXT NULL, `city` TEXT NULL, `created_at` INTEGER NULL DEFAULT (unixepoch()) )' WHERE type='table' AND name='session';
+UPDATE sqlite_schema SET sql='CREATE TABLE `website` ( `website_id` TEXT PRIMARY KEY NOT NULL, `name` TEXT NOT NULL, `domain` TEXT NULL, `share_id` TEXT NULL, `reset_at` INTEGER NULL, `user_id` TEXT NULL, `created_at` INTEGER NULL DEFAULT (unixepoch()), `updated_at` INTEGER NULL, `deleted_at` INTEGER NULL )' WHERE type='table' AND name='website';
+UPDATE sqlite_schema SET sql='CREATE TABLE `website_event` ( `event_id` TEXT PRIMARY KEY NOT NULL, `website_id` TEXT NOT NULL, `session_id` TEXT NOT NULL, `created_at` INTEGER NULL DEFAULT (unixepoch()), `url_path` TEXT NOT NULL, `url_query` TEXT NULL, `referrer_path` TEXT NULL, `referrer_query` TEXT NULL, `referrer_domain` TEXT NULL, `page_title` TEXT NULL, `event_type` INTEGER UNSIGNED NOT NULL DEFAULT 1, `event_name` TEXT NULL )' WHERE type='table' AND name='website_event';
+UPDATE sqlite_schema SET sql='CREATE TABLE `event_data` ( `event_id` TEXT PRIMARY KEY NOT NULL, `website_event_id` TEXT NOT NULL, `website_id` TEXT NOT NULL, `event_key` TEXT NOT NULL, `event_string_value` TEXT NULL, `event_numeric_value` NUMERIC NULL, `event_date_value` INTEGER NULL, `event_data_type` INTEGER UNSIGNED NOT NULL, `created_at` INTEGER NULL DEFAULT (unixepoch()) )' WHERE type='table' AND name='event_data';
+UPDATE sqlite_schema SET sql='CREATE TABLE `team` ( `team_id` TEXT PRIMARY KEY NOT NULL, `name` TEXT NOT NULL, `access_code` TEXT NULL, `created_at` INTEGER NULL DEFAULT (unixepoch()), `updated_at` INTEGER NULL )' WHERE type='table' AND name='team';
+UPDATE sqlite_schema SET sql='CREATE TABLE `team_user` ( `team_user_id` TEXT PRIMARY KEY NOT NULL, `team_id` TEXT NOT NULL, `user_id` TEXT NOT NULL, `role` TEXT NOT NULL, `created_at` INTEGER NULL DEFAULT (unixepoch()), `updated_at` INTEGER NULL )' WHERE type='table' AND name='team_user';
+UPDATE sqlite_schema SET sql='CREATE TABLE `team_website` ( `team_website_id` TEXT PRIMARY KEY NOT NULL, `team_id` TEXT NOT NULL, `website_id` TEXT NOT NULL, `created_at` INTEGER NULL DEFAULT (unixepoch()) )' WHERE type='table' AND name='team_website';
+CREATE TABLE update_schema_version ( version INTEGER );
+DROP TABLE update_schema_version;
+PRAGMA writable_schema=OFF;
+COMMIT;
\ No newline at end of file
diff --git a/db/sqlite/migrations/02_report_schema_session_data/migration.sql b/db/sqlite/migrations/02_report_schema_session_data/migration.sql
new file mode 100644
index 00000000..9ee99753
--- /dev/null
+++ b/db/sqlite/migrations/02_report_schema_session_data/migration.sql
@@ -0,0 +1,49 @@
+-- AlterTable
+ALTER TABLE `event_data` RENAME COLUMN `event_data_type` TO `data_type`;
+ALTER TABLE `event_data` RENAME COLUMN `event_date_value` TO `date_value`;
+ALTER TABLE `event_data` RENAME COLUMN `event_id` TO `event_data_id`;
+ALTER TABLE `event_data` RENAME COLUMN `event_numeric_value` TO `number_value`;
+ALTER TABLE `event_data` RENAME COLUMN `event_string_value` TO `string_value`;
+
+-- CreateTable
+CREATE TABLE `session_data` (
+    `session_data_id` TEXT PRIMARY KEY NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `session_id` TEXT NOT NULL,
+    `event_key` TEXT NOT NULL,
+    `string_value` TEXT NULL,
+    `number_value` NUMERIC NULL,
+    `date_value` INTEGER NULL,
+    `data_type` INTEGER UNSIGNED NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (unixepoch())
+);
+CREATE INDEX `session_data_created_at_idx` ON `session_data`(`created_at`);
+CREATE INDEX `session_data_website_id_idx` ON `session_data`(`website_id`);
+CREATE INDEX `session_data_session_id_idx` ON `session_data`(`session_id`);
+
+-- CreateTable
+CREATE TABLE `report` (
+    `report_id` TEXT PRIMARY KEY NOT NULL,
+    `user_id` TEXT NOT NULL,
+    `website_id` TEXT NOT NULL,
+    `type` TEXT NOT NULL,
+    `name` TEXT NOT NULL,
+    `description` TEXT NOT NULL,
+    `parameters` TEXT NOT NULL,
+    `created_at` INTEGER NULL DEFAULT (unixepoch()),
+    `updated_at` INTEGER NULL
+);
+CREATE UNIQUE INDEX `report_report_id_key` ON `report`(`report_id`);
+CREATE INDEX `report_user_id_idx` ON `report`(`user_id`);
+CREATE INDEX `report_website_id_idx` ON `report`(`website_id`);
+CREATE INDEX `report_type_idx` ON `report`(`type`);
+CREATE INDEX `report_name_idx` ON `report`(`name`);
+
+-- EventData migration
+UPDATE event_data
+SET string_value = number_value
+WHERE data_type = 2;
+
+UPDATE event_data
+SET string_value = strftime('%Y-%m-%dT%H:%M:%fZ', date_value, 'unixepoch')
+WHERE data_type = 4;
\ No newline at end of file
diff --git a/db/sqlite/migrations/03_metric_performance_index/migration.sql b/db/sqlite/migrations/03_metric_performance_index/migration.sql
new file mode 100644
index 00000000..64681364
--- /dev/null
+++ b/db/sqlite/migrations/03_metric_performance_index/migration.sql
@@ -0,0 +1,50 @@
+-- CreateIndex
+CREATE INDEX `event_data_website_id_created_at_idx` ON `event_data`(`website_id`, `created_at`);
+
+-- CreateIndex
+CREATE INDEX `event_data_website_id_created_at_event_key_idx` ON `event_data`(`website_id`, `created_at`, `event_key`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_idx` ON `session`(`website_id`, `created_at`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_hostname_idx` ON `session`(`website_id`, `created_at`, `hostname`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_browser_idx` ON `session`(`website_id`, `created_at`, `browser`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_os_idx` ON `session`(`website_id`, `created_at`, `os`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_device_idx` ON `session`(`website_id`, `created_at`, `device`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_screen_idx` ON `session`(`website_id`, `created_at`, `screen`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_language_idx` ON `session`(`website_id`, `created_at`, `language`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_country_idx` ON `session`(`website_id`, `created_at`, `country`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_subdivision1_idx` ON `session`(`website_id`, `created_at`, `subdivision1`);
+
+-- CreateIndex
+CREATE INDEX `session_website_id_created_at_city_idx` ON `session`(`website_id`, `created_at`, `city`);
+
+-- CreateIndex
+CREATE INDEX `website_event_website_id_created_at_url_path_idx` ON `website_event`(`website_id`, `created_at`, `url_path`);
+
+-- CreateIndex
+CREATE INDEX `website_event_website_id_created_at_url_query_idx` ON `website_event`(`website_id`, `created_at`, `url_query`);
+
+-- CreateIndex
+CREATE INDEX `website_event_website_id_created_at_referrer_domain_idx` ON `website_event`(`website_id`, `created_at`, `referrer_domain`);
+
+-- CreateIndex
+CREATE INDEX `website_event_website_id_created_at_page_title_idx` ON `website_event`(`website_id`, `created_at`, `page_title`);
+
+-- CreateIndex
+CREATE INDEX `website_event_website_id_created_at_event_name_idx` ON `website_event`(`website_id`, `created_at`, `event_name`);
diff --git a/db/sqlite/migrations/04_1_indexes_tables/migration.sql b/db/sqlite/migrations/04_1_indexes_tables/migration.sql
new file mode 100644
index 00000000..89418be8
--- /dev/null
+++ b/db/sqlite/migrations/04_1_indexes_tables/migration.sql
@@ -0,0 +1,206 @@
+-- Remove redundant indexes and clean table definitions
+BEGIN TRANSACTION;
+-- Create new tables
+CREATE TABLE "new_user" (
+    "user_id" TEXT NOT NULL,
+    "username" TEXT NOT NULL,
+    "password" TEXT NOT NULL,
+    "role" TEXT NOT NULL,
+    "created_at" INTEGER DEFAULT (unixepoch()),
+    "updated_at" INTEGER,
+    "deleted_at" INTEGER
+);
+CREATE TABLE "new_session" (
+    "session_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "hostname" TEXT,
+    "browser" TEXT,
+    "os" TEXT,
+    "device" TEXT,
+    "screen" TEXT,
+    "language" TEXT,
+    "country" TEXT,
+    "subdivision1" TEXT,
+    "subdivision2" TEXT,
+    "city" TEXT,
+    "created_at" INTEGER DEFAULT (unixepoch())
+);
+CREATE TABLE "new_website" (
+    "website_id" TEXT NOT NULL,
+    "name" TEXT NOT NULL,
+    "domain" TEXT,
+    "share_id" TEXT,
+    "reset_at" INTEGER,
+    "user_id" TEXT,
+    "created_at" INTEGER DEFAULT (unixepoch()),
+    "updated_at" INTEGER,
+    "deleted_at" INTEGER
+);
+CREATE TABLE "new_website_event" (
+    "event_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "session_id" TEXT NOT NULL,
+    "created_at" INTEGER DEFAULT (unixepoch()),
+    "url_path" TEXT NOT NULL,
+    "url_query" TEXT,
+    "referrer_path" TEXT,
+    "referrer_query" TEXT,
+    "referrer_domain" TEXT,
+    "page_title" TEXT,
+    "event_type" INTEGER NOT NULL DEFAULT 1,
+    "event_name" TEXT
+);
+CREATE TABLE "new_event_data" (
+    "event_data_id" TEXT NOT NULL,
+    "website_event_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "event_key" TEXT NOT NULL,
+    "string_value" TEXT,
+    "number_value" NUMERIC,
+    "date_value" INTEGER,
+    "data_type" INTEGER NOT NULL,
+    "created_at" INTEGER DEFAULT (unixepoch())
+);
+CREATE TABLE "new_team" (
+    "team_id" TEXT NOT NULL,
+    "name" TEXT NOT NULL,
+    "access_code" TEXT,
+    "created_at" INTEGER DEFAULT (unixepoch()),
+    "updated_at" INTEGER
+);
+CREATE TABLE "new_team_user" (
+    "team_user_id" TEXT NOT NULL,
+    "team_id" TEXT NOT NULL,
+    "user_id" TEXT NOT NULL,
+    "role" TEXT NOT NULL,
+    "created_at" INTEGER DEFAULT (unixepoch()),
+    "updated_at" INTEGER
+);
+CREATE TABLE "new_team_website" (
+    "team_website_id" TEXT NOT NULL,
+    "team_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "created_at" INTEGER DEFAULT (unixepoch())
+);
+CREATE TABLE "new_session_data" (
+    "session_data_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "session_id" TEXT NOT NULL,
+    "event_key" TEXT NOT NULL,
+    "string_value" TEXT,
+    "number_value" NUMERIC,
+    "date_value" INTEGER,
+    "data_type" INTEGER NOT NULL,
+    "created_at" INTEGER DEFAULT (unixepoch())
+);
+CREATE TABLE "new_report" (
+    "report_id" TEXT NOT NULL,
+    "user_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "type" TEXT NOT NULL,
+    "name" TEXT NOT NULL,
+    "description" TEXT NOT NULL,
+    "parameters" TEXT NOT NULL,
+    "created_at" INTEGER DEFAULT (unixepoch()),
+    "updated_at" INTEGER
+);
+-- Transfer data
+INSERT INTO "new_user" SELECT "user_id", "username", "password", "role", "created_at", "updated_at", "deleted_at" FROM "user";
+INSERT INTO "new_session" SELECT "session_id", "website_id", "hostname", "browser", "os", "device", "screen", "language", "country", "subdivision1", "subdivision2", "city", "created_at" FROM "session";
+INSERT INTO "new_website" SELECT "website_id", "name", "domain", "share_id", "reset_at", "user_id", "created_at", "updated_at", "deleted_at" FROM "website";
+INSERT INTO "new_website_event" SELECT "event_id", "website_id", "session_id", "created_at", "url_path", "url_query", "referrer_path", "referrer_query", "referrer_domain", "page_title", "event_type", "event_name" FROM "website_event";
+INSERT INTO "new_event_data" SELECT "event_data_id", "website_event_id", "website_id", "event_key", "string_value", "number_value", "date_value", "data_type", "created_at" FROM "event_data";
+INSERT INTO "new_team" SELECT "team_id", "name", "access_code", "created_at", "updated_at" FROM "team";
+INSERT INTO "new_team_user" SELECT "team_user_id", "team_id", "user_id", "role", "created_at", "updated_at" FROM "team_user";
+INSERT INTO "new_team_website" SELECT "team_website_id", "team_id", "website_id", "created_at" FROM "team_website";
+INSERT INTO "new_session_data" SELECT "session_data_id", "website_id", "session_id", "event_key", "string_value", "number_value", "date_value", "data_type", "created_at" FROM "session_data";
+INSERT INTO "new_report" SELECT "report_id", "user_id", "website_id", "type", "name", "description", "parameters", "created_at", "updated_at" FROM "report";
+-- Drop tables
+DROP TABLE "user";
+DROP TABLE "session";
+DROP TABLE "website";
+DROP TABLE "website_event";
+DROP TABLE "event_data";
+DROP TABLE "team";
+DROP TABLE "team_user";
+DROP TABLE "team_website";
+DROP TABLE "session_data";
+DROP TABLE "report";
+-- Rename tables
+ALTER TABLE "new_user" RENAME TO "user";
+ALTER TABLE "new_session" RENAME TO "session";
+ALTER TABLE "new_website" RENAME TO "website";
+ALTER TABLE "new_website_event" RENAME TO "website_event";
+ALTER TABLE "new_event_data" RENAME TO "event_data";
+ALTER TABLE "new_team" RENAME TO "team";
+ALTER TABLE "new_team_user" RENAME TO "team_user";
+ALTER TABLE "new_team_website" RENAME TO "team_website";
+ALTER TABLE "new_session_data" RENAME TO "session_data";
+ALTER TABLE "new_report" RENAME TO "report";
+-- Create indexes
+CREATE UNIQUE INDEX "user_user_id_key" ON "user"("user_id");
+CREATE UNIQUE INDEX "user_username_key" ON "user"("username");
+
+CREATE UNIQUE INDEX "session_session_id_key" ON "session"("session_id");
+CREATE INDEX "session_created_at_idx" ON "session"("created_at");
+CREATE INDEX "session_website_id_idx" ON "session"("website_id");
+CREATE INDEX "session_website_id_created_at_idx" ON "session"("website_id", "created_at");
+CREATE INDEX "session_website_id_created_at_hostname_idx" ON "session"("website_id", "created_at", "hostname");
+CREATE INDEX "session_website_id_created_at_browser_idx" ON "session"("website_id", "created_at", "browser");
+CREATE INDEX "session_website_id_created_at_os_idx" ON "session"("website_id", "created_at", "os");
+CREATE INDEX "session_website_id_created_at_device_idx" ON "session"("website_id", "created_at", "device");
+CREATE INDEX "session_website_id_created_at_screen_idx" ON "session"("website_id", "created_at", "screen");
+CREATE INDEX "session_website_id_created_at_language_idx" ON "session"("website_id", "created_at", "language");
+CREATE INDEX "session_website_id_created_at_country_idx" ON "session"("website_id", "created_at", "country");
+CREATE INDEX "session_website_id_created_at_subdivision1_idx" ON "session"("website_id", "created_at", "subdivision1");
+CREATE INDEX "session_website_id_created_at_city_idx" ON "session"("website_id", "created_at", "city");
+
+CREATE UNIQUE INDEX "website_website_id_key" ON "website"("website_id");
+CREATE UNIQUE INDEX "website_share_id_key" ON "website"("share_id");
+CREATE INDEX "website_user_id_idx" ON "website"("user_id");
+CREATE INDEX "website_created_at_idx" ON "website"("created_at");
+
+CREATE UNIQUE INDEX "website_event_event_id_key" ON "website_event"("event_id");
+CREATE INDEX "website_event_created_at_idx" ON "website_event"("created_at");
+CREATE INDEX "website_event_session_id_idx" ON "website_event"("session_id");
+CREATE INDEX "website_event_website_id_idx" ON "website_event"("website_id");
+CREATE INDEX "website_event_website_id_created_at_idx" ON "website_event"("website_id", "created_at");
+CREATE INDEX "website_event_website_id_session_id_created_at_idx" ON "website_event"("website_id", "session_id", "created_at");
+CREATE INDEX "website_event_website_id_created_at_url_path_idx" ON "website_event"("website_id", "created_at", "url_path");
+CREATE INDEX "website_event_website_id_created_at_url_query_idx" ON "website_event"("website_id", "created_at", "url_query");
+CREATE INDEX "website_event_website_id_created_at_referrer_domain_idx" ON "website_event"("website_id", "created_at", "referrer_domain");
+CREATE INDEX "website_event_website_id_created_at_page_title_idx" ON "website_event"("website_id", "created_at", "page_title");
+CREATE INDEX "website_event_website_id_created_at_event_name_idx" ON "website_event"("website_id", "created_at", "event_name");
+
+CREATE UNIQUE INDEX "event_data_event_data_id_key" ON "event_data"("event_data_id");
+CREATE INDEX "event_data_created_at_idx" ON "event_data"("created_at");
+CREATE INDEX "event_data_website_id_idx" ON "event_data"("website_id");
+CREATE INDEX "event_data_website_event_id_idx" ON "event_data"("website_event_id");
+CREATE INDEX "event_data_website_id_website_event_id_created_at_idx" ON "event_data"("website_id", "website_event_id", "created_at");
+CREATE INDEX "event_data_website_id_created_at_idx" ON "event_data"("website_id", "created_at");
+CREATE INDEX "event_data_website_id_created_at_event_key_idx" ON "event_data"("website_id", "created_at", "event_key");
+
+CREATE UNIQUE INDEX "team_team_id_key" ON "team"("team_id");
+CREATE UNIQUE INDEX "team_access_code_key" ON "team"("access_code");
+
+CREATE UNIQUE INDEX "team_user_team_user_id_key" ON "team_user"("team_user_id");
+CREATE INDEX "team_user_team_id_idx" ON "team_user"("team_id");
+CREATE INDEX "team_user_user_id_idx" ON "team_user"("user_id");
+
+CREATE UNIQUE INDEX "team_website_team_website_id_key" ON "team_website"("team_website_id");
+CREATE INDEX "team_website_team_id_idx" ON "team_website"("team_id");
+CREATE INDEX "team_website_website_id_idx" ON "team_website"("website_id");
+
+CREATE UNIQUE INDEX "session_data_session_data_id_key" ON "session_data"("session_data_id");
+CREATE INDEX "session_data_created_at_idx" ON "session_data"("created_at");
+CREATE INDEX "session_data_website_id_idx" ON "session_data"("website_id");
+CREATE INDEX "session_data_session_id_idx" ON "session_data"("session_id");
+
+CREATE UNIQUE INDEX "report_report_id_key" ON "report"("report_id");
+CREATE INDEX "report_user_id_idx" ON "report"("user_id");
+CREATE INDEX "report_website_id_idx" ON "report"("website_id");
+CREATE INDEX "report_type_idx" ON "report"("type");
+CREATE INDEX "report_name_idx" ON "report"("name");
+COMMIT;
+
+VACUUM;
\ No newline at end of file
diff --git a/db/sqlite/migrations/04_team_redesign/migration.sql b/db/sqlite/migrations/04_team_redesign/migration.sql
new file mode 100644
index 00000000..e2a6ed84
--- /dev/null
+++ b/db/sqlite/migrations/04_team_redesign/migration.sql
@@ -0,0 +1,31 @@
+/*
+  Warnings:
+
+  - You are about to drop the `team_website` table. If the table is not empty, all the data it contains will be lost.
+
+*/
+BEGIN TRANSACTION;
+-- AlterTable
+ALTER TABLE "team" ADD COLUMN "deleted_at" INTEGER;
+ALTER TABLE "team" ADD COLUMN "logo_url" TEXT;
+
+-- AlterTable
+ALTER TABLE "user" ADD COLUMN "display_name" TEXT;
+ALTER TABLE "user" ADD COLUMN "logo_url" TEXT;
+
+-- AlterTable
+ALTER TABLE "website" ADD COLUMN "created_by" TEXT;
+ALTER TABLE "website" ADD COLUMN "team_id" TEXT;
+COMMIT;
+
+-- MigrateData
+UPDATE "website" SET created_by = user_id WHERE team_id IS NULL;
+
+-- DropTable
+DROP TABLE "team_website";
+
+-- CreateIndex
+CREATE INDEX "website_team_id_idx" ON "website"("team_id");
+
+-- CreateIndex
+CREATE INDEX "website_created_by_idx" ON "website"("created_by");
\ No newline at end of file
diff --git a/db/sqlite/migrations/05_add_visit_id/migration.sql b/db/sqlite/migrations/05_add_visit_id/migration.sql
new file mode 100644
index 00000000..0ccb5343
--- /dev/null
+++ b/db/sqlite/migrations/05_add_visit_id/migration.sql
@@ -0,0 +1,58 @@
+BEGIN TRANSACTION;
+
+CREATE TABLE "new_website_event" (
+    "event_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "session_id" TEXT NOT NULL,
+    "visit_id" TEXT NOT NULL,
+    "created_at" INTEGER DEFAULT (unixepoch()),
+    "url_path" TEXT NOT NULL,
+    "url_query" TEXT,
+    "referrer_path" TEXT,
+    "referrer_query" TEXT,
+    "referrer_domain" TEXT,
+    "page_title" TEXT,
+    "event_type" INTEGER NOT NULL DEFAULT 1,
+    "event_name" TEXT
+);
+
+INSERT INTO "new_website_event" SELECT "event_id", "website_id", "session_id", 'uuid' as "visit_id", "created_at", "url_path", "url_query", "referrer_path", "referrer_query", "referrer_domain", "page_title", "event_type", "event_name" FROM "website_event";
+
+UPDATE "new_website_event" as we
+SET visit_id = a.uuid
+FROM (SELECT DISTINCT
+        s.session_id,
+        s.visit_time,
+        lower(
+          hex(randomblob(4))
+          || '-' || hex(randomblob(2))
+          || '-' || '4' || substr(hex(randomblob(2)), 2)
+          || '-' || substr('89AB', 1 + (abs(random()) % 4) , 1)  || substr(hex(randomblob(2)), 2)
+          || '-' || hex(randomblob(6))
+        ) uuid
+    FROM (SELECT DISTINCT session_id,
+            strftime('%Y-%m-%d %H:00:00', created_at, 'unixepoch') visit_time
+        FROM "website_event") s) a
+WHERE we.session_id = a.session_id 
+    and strftime('%Y-%m-%d %H:00:00', we.created_at, 'unixepoch') = a.visit_time;
+
+DROP TABLE "website_event";
+
+ALTER TABLE "new_website_event" RENAME TO "website_event";
+
+CREATE UNIQUE INDEX "website_event_event_id_key" ON "website_event"("event_id");
+CREATE INDEX "website_event_created_at_idx" ON "website_event"("created_at");
+CREATE INDEX "website_event_session_id_idx" ON "website_event"("session_id");
+CREATE INDEX "website_event_visit_id_idx" ON "website_event"("visit_id");
+CREATE INDEX "website_event_website_id_idx" ON "website_event"("website_id");
+CREATE INDEX "website_event_website_id_created_at_idx" ON "website_event"("website_id", "created_at");
+CREATE INDEX "website_event_website_id_session_id_created_at_idx" ON "website_event"("website_id", "session_id", "created_at");
+CREATE INDEX "website_event_website_id_created_at_url_path_idx" ON "website_event"("website_id", "created_at", "url_path");
+CREATE INDEX "website_event_website_id_created_at_url_query_idx" ON "website_event"("website_id", "created_at", "url_query");
+CREATE INDEX "website_event_website_id_created_at_referrer_domain_idx" ON "website_event"("website_id", "created_at", "referrer_domain");
+CREATE INDEX "website_event_website_id_created_at_page_title_idx" ON "website_event"("website_id", "created_at", "page_title");
+CREATE INDEX "website_event_website_id_created_at_event_name_idx" ON "website_event"("website_id", "created_at", "event_name");
+CREATE INDEX "website_event_website_id_visit_id_created_at_idx" ON "website_event"("website_id", "visit_id", "created_at");
+
+COMMIT;
+VACUUM;
\ No newline at end of file
diff --git a/db/sqlite/migrations/06_session_data/migration.sql b/db/sqlite/migrations/06_session_data/migration.sql
new file mode 100644
index 00000000..9ac346ae
--- /dev/null
+++ b/db/sqlite/migrations/06_session_data/migration.sql
@@ -0,0 +1,20 @@
+-- DropIndex
+DROP INDEX "event_data_website_id_created_at_event_key_idx";
+
+-- DropIndex
+DROP INDEX "event_data_website_id_website_event_id_created_at_idx";
+
+-- AlterTable
+ALTER TABLE "event_data" RENAME COLUMN "event_key" TO "data_key";
+
+-- AlterTable
+ALTER TABLE "session_data" RENAME COLUMN "event_key" TO "data_key";
+
+-- CreateIndex
+CREATE INDEX "event_data_website_id_created_at_data_key_idx" ON "event_data"("website_id", "created_at", "data_key");
+
+-- CreateIndex
+CREATE INDEX "session_data_session_id_created_at_idx" ON "session_data"("session_id", "created_at");
+
+-- CreateIndex
+CREATE INDEX "session_data_website_id_created_at_data_key_idx" ON "session_data"("website_id", "created_at", "data_key");
diff --git a/db/sqlite/migrations/07_add_tag/migration.sql b/db/sqlite/migrations/07_add_tag/migration.sql
new file mode 100644
index 00000000..35ccefb0
--- /dev/null
+++ b/db/sqlite/migrations/07_add_tag/migration.sql
@@ -0,0 +1,5 @@
+-- AlterTable
+ALTER TABLE "website_event" ADD COLUMN "tag" TEXT NULL;
+
+-- CreateIndex
+CREATE INDEX "website_event_website_id_created_at_tag_idx" ON "website_event"("website_id", "created_at", "tag");
diff --git a/db/sqlite/migrations/08_1_datetime/migration.sql b/db/sqlite/migrations/08_1_datetime/migration.sql
new file mode 100644
index 00000000..2d0c0317
--- /dev/null
+++ b/db/sqlite/migrations/08_1_datetime/migration.sql
@@ -0,0 +1,145 @@
+BEGIN TRANSACTION;
+PRAGMA writable_schema=ON;
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "user" (
+    "user_id" TEXT NOT NULL,
+    "username" TEXT NOT NULL,
+    "password" TEXT NOT NULL,
+    "role" TEXT NOT NULL,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000),
+    "updated_at" DATETIME,
+    "deleted_at" DATETIME
+, "display_name" TEXT, "logo_url" TEXT)' WHERE type='table' AND name='user';
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "session" (
+    "session_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "hostname" TEXT,
+    "browser" TEXT,
+    "os" TEXT,
+    "device" TEXT,
+    "screen" TEXT,
+    "language" TEXT,
+    "country" TEXT,
+    "subdivision1" TEXT,
+    "subdivision2" TEXT,
+    "city" TEXT,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000)
+)' WHERE type='table' AND name='session';
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "website" (
+    "website_id" TEXT NOT NULL,
+    "name" TEXT NOT NULL,
+    "domain" TEXT,
+    "share_id" TEXT,
+    "reset_at" DATETIME,
+    "user_id" TEXT,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000),
+    "updated_at" DATETIME,
+    "deleted_at" DATETIME
+, "created_by" TEXT, "team_id" TEXT)' WHERE type='table' AND name='website';
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "event_data" (
+    "event_data_id" TEXT NOT NULL,
+    "website_event_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "data_key" TEXT NOT NULL,
+    "string_value" TEXT,
+    "number_value" NUMERIC,
+    "date_value" DATETIME,
+    "data_type" INTEGER NOT NULL,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000)
+)' WHERE type='table' AND name='event_data';
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "team" (
+    "team_id" TEXT NOT NULL,
+    "name" TEXT NOT NULL,
+    "access_code" TEXT,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000),
+    "updated_at" DATETIME
+, "deleted_at" DATETIME, "logo_url" TEXT)' WHERE type='table' AND name='team';
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "team_user" (
+    "team_user_id" TEXT NOT NULL,
+    "team_id" TEXT NOT NULL,
+    "user_id" TEXT NOT NULL,
+    "role" TEXT NOT NULL,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000),
+    "updated_at" DATETIME
+)' WHERE type='table' AND name='team_user';
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "session_data" (
+    "session_data_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "session_id" TEXT NOT NULL,
+    "data_key" TEXT NOT NULL,
+    "string_value" TEXT,
+    "number_value" NUMERIC,
+    "date_value" DATETIME,
+    "data_type" INTEGER NOT NULL,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000)
+)' WHERE type='table' AND name='session_data';
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "report" (
+    "report_id" TEXT NOT NULL,
+    "user_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "type" TEXT NOT NULL,
+    "name" TEXT NOT NULL,
+    "description" TEXT NOT NULL,
+    "parameters" TEXT NOT NULL,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000),
+    "updated_at" DATETIME
+)' WHERE type='table' AND name='report';
+
+UPDATE sqlite_schema SET sql = 'CREATE TABLE "website_event" (
+    "event_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "session_id" TEXT NOT NULL,
+    "visit_id" TEXT NOT NULL,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000),
+    "url_path" TEXT NOT NULL,
+    "url_query" TEXT,
+    "referrer_path" TEXT,
+    "referrer_query" TEXT,
+    "referrer_domain" TEXT,
+    "page_title" TEXT,
+    "event_type" INTEGER NOT NULL DEFAULT 1,
+    "event_name" TEXT
+, "tag" TEXT NULL)' WHERE type='table' AND name='website_event';
+
+CREATE TABLE update_schema_version ( version INTEGER );
+DROP TABLE update_schema_version;
+PRAGMA writable_schema=OFF;
+COMMIT;
+
+UPDATE user SET created_at = created_at * 1000;
+UPDATE user SET updated_at = updated_at * 1000 WHERE updated_at IS NOT NULL;
+UPDATE user SET deleted_at = deleted_at * 1000 WHERE deleted_at IS NOT NULL;
+
+UPDATE session SET created_at = created_at * 1000;
+
+UPDATE website SET created_at = created_at * 1000;
+UPDATE website SET updated_at = updated_at * 1000 WHERE updated_at IS NOT NULL;
+UPDATE website SET deleted_at = deleted_at * 1000 WHERE deleted_at IS NOT NULL;
+UPDATE website SET reset_at = reset_at * 1000 WHERE reset_at IS NOT NULL;
+
+UPDATE event_data SET created_at = created_at * 1000;
+UPDATE event_data SET date_value = date_value * 1000 WHERE date_value IS NOT NULL;
+
+UPDATE team SET created_at = created_at * 1000;
+UPDATE team SET updated_at = updated_at * 1000 WHERE updated_at IS NOT NULL;
+UPDATE team SET deleted_at = deleted_at * 1000 WHERE deleted_at IS NOT NULL;
+
+UPDATE team_user SET created_at = created_at * 1000;
+UPDATE team_user SET updated_at = updated_at * 1000 WHERE updated_at IS NOT NULL;
+
+UPDATE session_data SET created_at = created_at * 1000;
+UPDATE session_data SET date_value = date_value * 1000 WHERE date_value IS NOT NULL;
+
+UPDATE report SET created_at = created_at * 1000;
+UPDATE report SET updated_at = updated_at * 1000 WHERE updated_at IS NOT NULL;
+
+UPDATE website_event SET created_at = created_at * 1000;
+
+VACUUM;
\ No newline at end of file
diff --git a/db/sqlite/migrations/08_add_utm_clid/migration.sql b/db/sqlite/migrations/08_add_utm_clid/migration.sql
new file mode 100644
index 00000000..afbd6434
--- /dev/null
+++ b/db/sqlite/migrations/08_add_utm_clid/migration.sql
@@ -0,0 +1,12 @@
+-- AlterTable
+ALTER TABLE "website_event" ADD COLUMN "fbclid" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "gclid" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "li_fat_id" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "msclkid" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "ttclid" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "twclid" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "utm_campaign" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "utm_content" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "utm_medium" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "utm_source" TEXT;
+ALTER TABLE "website_event" ADD COLUMN "utm_term" TEXT;
diff --git a/db/sqlite/migrations/09_update_hostname_region/migration.sql b/db/sqlite/migrations/09_update_hostname_region/migration.sql
new file mode 100644
index 00000000..28e7eadd
--- /dev/null
+++ b/db/sqlite/migrations/09_update_hostname_region/migration.sql
@@ -0,0 +1,22 @@
+-- AlterTable
+ALTER TABLE "website_event" ADD COLUMN "hostname" TEXT;
+
+-- DataMigration
+UPDATE "website_event" AS w
+SET hostname = s.hostname
+FROM "session" AS s
+WHERE s.website_id = w.website_id
+    and s.session_id = w.session_id;  
+
+-- DropIndex
+DROP INDEX "session_website_id_created_at_hostname_idx";
+DROP INDEX "session_website_id_created_at_subdivision1_idx";
+
+-- AlterTable
+ALTER TABLE "session" RENAME COLUMN "subdivision1" TO "region";
+ALTER TABLE "session" DROP COLUMN "subdivision2";
+ALTER TABLE "session" DROP COLUMN "hostname";
+
+-- CreateIndex
+CREATE INDEX "website_event_website_id_created_at_hostname_idx" ON "website_event"("website_id", "created_at", "hostname");
+CREATE INDEX "session_website_id_created_at_region_idx" ON "session"("website_id", "created_at", "region");
diff --git a/db/sqlite/migrations/10_add_distinct_id/migration.sql b/db/sqlite/migrations/10_add_distinct_id/migration.sql
new file mode 100644
index 00000000..c25de1b5
--- /dev/null
+++ b/db/sqlite/migrations/10_add_distinct_id/migration.sql
@@ -0,0 +1,5 @@
+-- AlterTable
+ALTER TABLE "session" ADD COLUMN "distinct_id" TEXT;
+
+-- AlterTable
+ALTER TABLE "session_data" ADD COLUMN "distinct_id" TEXT;
diff --git a/db/sqlite/migrations/11_add_segment/migration.sql b/db/sqlite/migrations/11_add_segment/migration.sql
new file mode 100644
index 00000000..0de5674a
--- /dev/null
+++ b/db/sqlite/migrations/11_add_segment/migration.sql
@@ -0,0 +1,16 @@
+-- CreateTable
+CREATE TABLE "segment" (
+    "segment_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "type" TEXT NOT NULL,
+    "name" TEXT NOT NULL,
+    "parameters" JSONB NOT NULL,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000),
+    "updated_at" DATETIME
+);
+
+-- CreateIndex
+CREATE UNIQUE INDEX "segment_segment_id_key" ON "segment"("segment_id");
+
+-- CreateIndex
+CREATE INDEX "segment_website_id_idx" ON "segment"("website_id");
diff --git a/db/sqlite/migrations/12_update_report_parameter/migration.sql b/db/sqlite/migrations/12_update_report_parameter/migration.sql
new file mode 100644
index 00000000..f80e72ef
--- /dev/null
+++ b/db/sqlite/migrations/12_update_report_parameter/migration.sql
@@ -0,0 +1,20 @@
+-- RedefineTables
+CREATE TABLE "new_report" (
+    "report_id" TEXT NOT NULL,
+    "user_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "type" TEXT NOT NULL,
+    "name" TEXT NOT NULL,
+    "description" TEXT NOT NULL,
+    "parameters" JSONB NOT NULL,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000),
+    "updated_at" DATETIME
+);
+INSERT INTO "new_report" ("created_at", "description", "name", "parameters", "report_id", "type", "updated_at", "user_id", "website_id") SELECT "created_at", "description", "name", "parameters", "report_id", "type", "updated_at", "user_id", "website_id" FROM "report";
+DROP TABLE "report";
+ALTER TABLE "new_report" RENAME TO "report";
+CREATE UNIQUE INDEX "report_report_id_key" ON "report"("report_id");
+CREATE INDEX "report_user_id_idx" ON "report"("user_id");
+CREATE INDEX "report_website_id_idx" ON "report"("website_id");
+CREATE INDEX "report_type_idx" ON "report"("type");
+CREATE INDEX "report_name_idx" ON "report"("name");
diff --git a/db/sqlite/migrations/13_add_revenue/migration.sql b/db/sqlite/migrations/13_add_revenue/migration.sql
new file mode 100644
index 00000000..3338da79
--- /dev/null
+++ b/db/sqlite/migrations/13_add_revenue/migration.sql
@@ -0,0 +1,26 @@
+-- CreateTable
+CREATE TABLE "revenue" (
+    "revenue_id" TEXT NOT NULL,
+    "website_id" TEXT NOT NULL,
+    "session_id" TEXT NOT NULL,
+    "event_id" TEXT NOT NULL,
+    "event_name" TEXT NOT NULL,
+    "currency" TEXT NOT NULL,
+    "revenue" NUMERIC,
+    "created_at" DATETIME DEFAULT (unixepoch() * 1000)
+);
+
+-- CreateIndex
+CREATE UNIQUE INDEX "revenue_revenue_id_key" ON "revenue"("revenue_id");
+
+-- CreateIndex
+CREATE INDEX "revenue_website_id_idx" ON "revenue"("website_id");
+
+-- CreateIndex
+CREATE INDEX "revenue_session_id_idx" ON "revenue"("session_id");
+
+-- CreateIndex
+CREATE INDEX "revenue_website_id_created_at_idx" ON "revenue"("website_id", "created_at");
+
+-- CreateIndex
+CREATE INDEX "revenue_website_id_session_id_created_at_idx" ON "revenue"("website_id", "session_id", "created_at");
diff --git a/db/sqlite/migrations/migration_lock.toml b/db/sqlite/migrations/migration_lock.toml
new file mode 100644
index 00000000..e5e5c470
--- /dev/null
+++ b/db/sqlite/migrations/migration_lock.toml
@@ -0,0 +1,3 @@
+# Please do not edit this file manually
+# It should be added in your version-control system (i.e. Git)
+provider = "sqlite"
\ No newline at end of file
diff --git a/db/sqlite/schema.prisma b/db/sqlite/schema.prisma
new file mode 100644
index 00000000..163765c1
--- /dev/null
+++ b/db/sqlite/schema.prisma
@@ -0,0 +1,269 @@
+generator client {
+  provider = "prisma-client-js"
+}
+
+datasource db {
+  provider     = "sqlite"
+  url          = env("DATABASE_URL")
+  relationMode = "prisma"
+}
+
+model User {
+  id          String    @unique @map("user_id")
+  username    String    @unique
+  password    String
+  role        String    @map("role")
+  logoUrl     String?   @map("logo_url")
+  displayName String?   @map("display_name")
+  createdAt   DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+  updatedAt   DateTime? @updatedAt @map("updated_at")
+  deletedAt   DateTime? @map("deleted_at")
+
+  websiteUser       Website[]  @relation("user")
+  websiteCreateUser Website[]  @relation("createUser")
+  teamUser          TeamUser[]
+  report            Report[]
+
+  @@map("user")
+}
+
+model Session {
+  id         String    @unique @map("session_id")
+  websiteId  String    @map("website_id")
+  browser    String?
+  os         String?
+  device     String?
+  screen     String?
+  language   String?
+  country    String?
+  region     String?
+  city       String?
+  distinctId String?   @map("distinct_id")
+  createdAt  DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+
+  websiteEvent WebsiteEvent[]
+  sessionData  SessionData[]
+  Revenue      Revenue[]
+
+  @@index([createdAt])
+  @@index([websiteId])
+  @@index([websiteId, createdAt])
+  @@index([websiteId, createdAt, browser])
+  @@index([websiteId, createdAt, os])
+  @@index([websiteId, createdAt, device])
+  @@index([websiteId, createdAt, screen])
+  @@index([websiteId, createdAt, language])
+  @@index([websiteId, createdAt, country])
+  @@index([websiteId, createdAt, region])
+  @@index([websiteId, createdAt, city])
+  @@map("session")
+}
+
+model Website {
+  id        String    @unique @map("website_id")
+  name      String
+  domain    String?
+  shareId   String?   @unique @map("share_id")
+  resetAt   DateTime? @map("reset_at")
+  userId    String?   @map("user_id")
+  teamId    String?   @map("team_id")
+  createdBy String?   @map("created_by")
+  createdAt DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+  updatedAt DateTime? @updatedAt @map("updated_at")
+  deletedAt DateTime? @map("deleted_at")
+
+  user        User?         @relation("user", fields: [userId], references: [id])
+  createUser  User?         @relation("createUser", fields: [createdBy], references: [id])
+  team        Team?         @relation(fields: [teamId], references: [id])
+  eventData   EventData[]
+  report      Report[]
+  sessionData SessionData[]
+  Segment     Segment[]
+  Revenue     Revenue[]
+
+  @@index([userId])
+  @@index([teamId])
+  @@index([createdAt])
+  @@index([createdBy])
+  @@map("website")
+}
+
+model WebsiteEvent {
+  id             String    @unique @map("event_id")
+  websiteId      String    @map("website_id")
+  sessionId      String    @map("session_id")
+  visitId        String    @map("visit_id")
+  createdAt      DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+  urlPath        String    @map("url_path")
+  urlQuery       String?   @map("url_query")
+  utmSource      String?   @map("utm_source")
+  utmMedium      String?   @map("utm_medium")
+  utmCampaign    String?   @map("utm_campaign")
+  utmContent     String?   @map("utm_content")
+  utmTerm        String?   @map("utm_term")
+  referrerPath   String?   @map("referrer_path")
+  referrerQuery  String?   @map("referrer_query")
+  referrerDomain String?   @map("referrer_domain")
+  pageTitle      String?   @map("page_title")
+  gclid          String?   @map("gclid")
+  fbclid         String?   @map("fbclid")
+  msclkid        String?   @map("msclkid")
+  ttclid         String?   @map("ttclid")
+  lifatid        String?   @map("li_fat_id")
+  twclid         String?   @map("twclid")
+  eventType      Int       @default(1) @map("event_type")
+  eventName      String?   @map("event_name")
+  tag            String?
+  hostname       String?
+
+  eventData EventData[]
+  session   Session     @relation(fields: [sessionId], references: [id])
+
+  @@index([createdAt])
+  @@index([sessionId])
+  @@index([visitId])
+  @@index([websiteId])
+  @@index([websiteId, createdAt])
+  @@index([websiteId, createdAt, urlPath])
+  @@index([websiteId, createdAt, urlQuery])
+  @@index([websiteId, createdAt, referrerDomain])
+  @@index([websiteId, createdAt, pageTitle])
+  @@index([websiteId, createdAt, eventName])
+  @@index([websiteId, createdAt, tag])
+  @@index([websiteId, sessionId, createdAt])
+  @@index([websiteId, visitId, createdAt])
+  @@index([websiteId, createdAt, hostname])
+  @@map("website_event")
+}
+
+model EventData {
+  id             String    @unique @map("event_data_id")
+  websiteId      String    @map("website_id")
+  websiteEventId String    @map("website_event_id")
+  dataKey        String    @map("data_key")
+  stringValue    String?   @map("string_value")
+  numberValue    Decimal?  @map("number_value")
+  dateValue      DateTime? @map("date_value")
+  dataType       Int       @map("data_type")
+  createdAt      DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+
+  website      Website      @relation(fields: [websiteId], references: [id])
+  websiteEvent WebsiteEvent @relation(fields: [websiteEventId], references: [id])
+
+  @@index([createdAt])
+  @@index([websiteId])
+  @@index([websiteEventId])
+  @@index([websiteId, createdAt])
+  @@index([websiteId, createdAt, dataKey])
+  @@map("event_data")
+}
+
+model SessionData {
+  id          String    @unique @map("session_data_id")
+  websiteId   String    @map("website_id")
+  sessionId   String    @map("session_id")
+  dataKey     String    @map("data_key")
+  stringValue String?   @map("string_value")
+  numberValue Decimal?  @map("number_value")
+  dateValue   DateTime? @map("date_value")
+  dataType    Int       @map("data_type")
+  distinctId  String?   @map("distinct_id")
+  createdAt   DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+
+  website Website @relation(fields: [websiteId], references: [id])
+  session Session @relation(fields: [sessionId], references: [id])
+
+  @@index([createdAt])
+  @@index([websiteId])
+  @@index([sessionId])
+  @@index([sessionId, createdAt])
+  @@index([websiteId, createdAt, dataKey])
+  @@map("session_data")
+}
+
+model Team {
+  id         String    @unique @map("team_id")
+  name       String
+  accessCode String?   @unique @map("access_code")
+  logoUrl    String?   @map("logo_url")
+  createdAt  DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+  updatedAt  DateTime? @updatedAt @map("updated_at")
+  deletedAt  DateTime? @map("deleted_at")
+
+  website  Website[]
+  teamUser TeamUser[]
+
+  @@map("team")
+}
+
+model TeamUser {
+  id        String    @unique @map("team_user_id")
+  teamId    String    @map("team_id")
+  userId    String    @map("user_id")
+  role      String    @map("role")
+  createdAt DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+  updatedAt DateTime? @updatedAt @map("updated_at")
+
+  team Team @relation(fields: [teamId], references: [id])
+  user User @relation(fields: [userId], references: [id])
+
+  @@index([teamId])
+  @@index([userId])
+  @@map("team_user")
+}
+
+model Report {
+  id          String    @unique @map("report_id")
+  userId      String    @map("user_id")
+  websiteId   String    @map("website_id")
+  type        String    @map("type")
+  name        String    @map("name")
+  description String    @map("description")
+  parameters  Json
+  createdAt   DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+  updatedAt   DateTime? @updatedAt @map("updated_at")
+
+  user    User    @relation(fields: [userId], references: [id])
+  website Website @relation(fields: [websiteId], references: [id])
+
+  @@index([userId])
+  @@index([websiteId])
+  @@index([type])
+  @@index([name])
+  @@map("report")
+}
+
+model Segment {
+  id         String    @unique @map("segment_id")
+  websiteId  String    @map("website_id")
+  type       String
+  name       String
+  parameters Json
+  createdAt  DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+  updatedAt  DateTime? @updatedAt @map("updated_at")
+
+  website Website @relation(fields: [websiteId], references: [id])
+
+  @@index([websiteId])
+  @@map("segment")
+}
+
+model Revenue {
+  id        String    @unique @map("revenue_id")
+  websiteId String    @map("website_id")
+  sessionId String    @map("session_id")
+  eventId   String    @map("event_id")
+  eventName String    @map("event_name")
+  currency  String
+  revenue   Decimal?
+  createdAt DateTime? @default(dbgenerated("unixepoch() * 1000")) @map("created_at")
+
+  website Website @relation(fields: [websiteId], references: [id])
+  session Session @relation(fields: [sessionId], references: [id])
+
+  @@index([websiteId])
+  @@index([sessionId])
+  @@index([websiteId, createdAt])
+  @@index([websiteId, sessionId, createdAt])
+  @@map("revenue")
+}
diff --git a/scripts/check-db.js b/scripts/check-db.js
index ca0fca31..a0ab55cf 100644
--- a/scripts/check-db.js
+++ b/scripts/check-db.js
@@ -17,10 +17,15 @@ function getDatabaseType(url = process.env.DATABASE_URL) {
     return 'postgresql';
   }
 
+  if (type === 'file') {
+    return 'sqlite';
+  }
+
   return type;
 }
 
 const prisma = new PrismaClient();
+const databaseType = getDatabaseType();
 
 function success(msg) {
   console.log(chalk.greenBright(`✓ ${msg}`));
@@ -49,30 +54,32 @@ async function checkConnection() {
 }
 
 async function checkDatabaseVersion() {
-  const query = await prisma.$queryRaw`select version() as version`;
-  const version = semver.valid(semver.coerce(query[0].version));
+  if (databaseType !== 'sqlite') {
+    const query = await prisma.$queryRaw`select version() as version`;
+    const version = semver.valid(semver.coerce(query[0].version));
 
-  const databaseType = getDatabaseType();
-  const minVersion = databaseType === 'postgresql' ? '9.4.0' : '5.7.0';
+    const minVersion = databaseType === 'postgresql' ? '9.4.0' : '5.7.0';
 
-  if (semver.lt(version, minVersion)) {
-    throw new Error(
-      `Database version is not compatible. Please upgrade ${databaseType} version to ${minVersion} or greater`,
-    );
-  }
+    if (semver.lt(version, minVersion)) {
+      throw new Error(
+        `Database version is not compatible. Please upgrade ${databaseType} version to ${minVersion} or greater`,
+      );
+    }
 
-  success('Database version check successful.');
+    success('Database version check successful.');
+  }
 }
 
 async function checkV1Tables() {
+  // check for v1 migrations before v2 release date
+  const releaseDate = (databaseType !== 'sqlite') ? "'2023-04-17'" : 1686268800000;
   try {
-    // check for v1 migrations before v2 release date
     const record =
-      await prisma.$queryRaw`select * from _prisma_migrations where started_at < '2023-04-17'`;
+      await prisma.$queryRaw`select * from _prisma_migrations where started_at < ${releaseDate}`;
 
     if (record.length > 0) {
       error(
-        'Umami v1 tables detected. For how to upgrade from v1 to v2 go to https://umami.is/docs/migrate-v1-v2.',
+        'Umami v1 tables detected.',
       );
       process.exit(1);
     }
diff --git a/scripts/copy-db-files.js b/scripts/copy-db-files.js
index 15c34674..673db6b6 100644
--- a/scripts/copy-db-files.js
+++ b/scripts/copy-db-files.js
@@ -11,12 +11,16 @@ function getDatabaseType(url = process.env.DATABASE_URL) {
     return 'postgresql';
   }
 
+  if (type === 'file') {
+    return 'sqlite';
+  }
+
   return type;
 }
 
 const databaseType = getDatabaseType();
 
-if (!databaseType || !['mysql', 'postgresql'].includes(databaseType)) {
+if (!databaseType || !['mysql', 'postgresql', 'sqlite'].includes(databaseType)) {
   throw new Error('Missing or invalid database');
 }
 
diff --git a/scripts/data-migrations/convert-utm-clid-columns.js b/scripts/data-migrations/convert-utm-clid-columns.js
new file mode 100644
index 00000000..82a7ba47
--- /dev/null
+++ b/scripts/data-migrations/convert-utm-clid-columns.js
@@ -0,0 +1,62 @@
+/*
+* < v2.18 data conversion
+*/
+
+require('dotenv').config();
+const { PrismaClient } = require('@prisma/client');
+
+const UTM_CLID_LENGTH = 255;
+
+const columns = [
+  'fbclid',
+  'gclid',
+  'li_fat_id',
+  'msclkid',
+  'ttclid',
+  'twclid',
+  'utm_campaign',
+  'utm_content',
+  'utm_medium',
+  'utm_source',
+  'utm_term',
+];
+
+const regexes = columns.reduce((acc, column) => {
+  acc[column] = new RegExp(`(?:[&?]|^)${column}=([^&]+)`, 'i');
+  return acc;
+}, {});
+
+const prisma = new PrismaClient();
+
+(async () => {
+  try {
+    const queries = [];
+    const websiteEvents = await prisma.$queryRaw`SELECT event_id, url_query FROM website_event WHERE url_query <> ''`;
+
+    websiteEvents.forEach(({ event_id, url_query }) => {
+      const updates = [];
+
+      for (const column of columns) {
+        const match = url_query.match(regexes[column]);
+
+        if (match) {
+          updates.push(`${column} = '${match[1].substring(0, UTM_CLID_LENGTH)}'`);
+        }
+      }
+
+      if (updates.length != 0) {
+        queries.push(prisma.$executeRawUnsafe(
+          `UPDATE website_event SET ${updates.join(', ')} WHERE event_id = '${event_id}'`
+        ));
+      }
+    });
+
+    await prisma.$transaction(queries);
+    await prisma.$disconnect();
+    console.log('Conversion completed.');
+  } catch (e) {
+    console.error(e);
+    await prisma.$disconnect();
+    process.exit(1);
+  }
+})();
\ No newline at end of file
diff --git a/scripts/data-migrations/convert-utm-clid-columns.sql b/scripts/data-migrations/convert-utm-clid-columns.sql
deleted file mode 100644
index fffe1ddb..00000000
--- a/scripts/data-migrations/convert-utm-clid-columns.sql
+++ /dev/null
@@ -1,49 +0,0 @@
------------------------------------------------------
--- PostgreSQL
------------------------------------------------------
-UPDATE "website_event" we
-SET fbclid = LEFT(url.fbclid, 255),
-    gclid = LEFT(url.gclid, 255),
-    li_fat_id = LEFT(url.li_fat_id, 255),
-    msclkid = LEFT(url.msclkid, 255),
-    ttclid = LEFT(url.ttclid, 255),
-    twclid = LEFT(url.twclid, 255),
-    utm_campaign = LEFT(url.utm_campaign, 255),
-    utm_content = LEFT(url.utm_content, 255),
-    utm_medium = LEFT(url.utm_medium, 255),
-    utm_source = LEFT(url.utm_source, 255),
-    utm_term = LEFT(url.utm_term, 255)
-FROM (SELECT event_id, website_id, session_id,
-          (regexp_matches(url_query, '(?:[&?]|^)fbclid=([^&]+)', 'i'))[1] AS fbclid,
-          (regexp_matches(url_query, '(?:[&?]|^)gclid=([^&]+)', 'i'))[1] AS gclid,
-          (regexp_matches(url_query, '(?:[&?]|^)li_fat_id=([^&]+)', 'i'))[1] AS li_fat_id,
-          (regexp_matches(url_query, '(?:[&?]|^)msclkid=([^&]+)', 'i'))[1] AS msclkid,
-          (regexp_matches(url_query, '(?:[&?]|^)ttclid=([^&]+)', 'i'))[1] AS ttclid,
-          (regexp_matches(url_query, '(?:[&?]|^)twclid=([^&]+)', 'i'))[1] AS twclid,
-          (regexp_matches(url_query, '(?:[&?]|^)utm_campaign=([^&]+)', 'i'))[1] AS utm_campaign,
-          (regexp_matches(url_query, '(?:[&?]|^)utm_content=([^&]+)', 'i'))[1] AS utm_content,
-          (regexp_matches(url_query, '(?:[&?]|^)utm_medium=([^&]+)', 'i'))[1] AS utm_medium,
-          (regexp_matches(url_query, '(?:[&?]|^)utm_source=([^&]+)', 'i'))[1] AS utm_source,
-          (regexp_matches(url_query, '(?:[&?]|^)utm_term=([^&]+)', 'i'))[1] AS utm_term
-    FROM "website_event"
-    WHERE url_query IS NOT NULL) url
-WHERE we.event_id = url.event_id
-    and we.session_id = url.session_id
-    and we.website_id = url.website_id;
-
------------------------------------------------------
--- MySQL
------------------------------------------------------
-UPDATE `website_event`
-SET fbclid = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)fbclid=[^&]+'), '=', -1), '&', 1), 255),
-    gclid = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)gclid=[^&]+'), '=', -1), '&', 1), 255),
-    li_fat_id = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)li_fat_id=[^&]+'), '=', -1), '&', 1), 255),
-    msclkid = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)msclkid=[^&]+'), '=', -1), '&', 1), 255),
-    ttclid = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)ttclid=[^&]+'), '=', -1), '&', 1), 255),
-    twclid = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)twclid=[^&]+'), '=', -1), '&', 1), 255),
-    utm_campaign = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)utm_campaign=[^&]+'), '=', -1), '&', 1), 255),
-    utm_content = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)utm_content=[^&]+'), '=', -1), '&', 1), 255),
-    utm_medium = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)utm_medium=[^&]+'), '=', -1), '&', 1), 255),
-    utm_source = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)utm_source=[^&]+'), '=', -1), '&', 1), 255),
-    utm_term = LEFT(SUBSTRING_INDEX(SUBSTRING_INDEX(REGEXP_SUBSTR(url_query, '(?:[&?]|^)utm_term=[^&]+'), '=', -1), '&', 1), 255)
-WHERE url_query IS NOT NULL;
diff --git a/scripts/data-migrations/populate-revenue-table.sql b/scripts/data-migrations/populate-revenue-table.sql
index 9df75189..ce0d9757 100644
--- a/scripts/data-migrations/populate-revenue-table.sql
+++ b/scripts/data-migrations/populate-revenue-table.sql
@@ -1,29 +1,11 @@
------------------------------------------------------
--- PostgreSQL
------------------------------------------------------
-INSERT INTO "revenue"
-SELECT gen_random_uuid() revenue_id,
-    ed.website_id,
-    we.session_id,
-    we.event_id,
-    we.event_name,
-    currency.string_value currency,
-    coalesce(ed.number_value, cast(ed.string_value as numeric(19,4))) revenue,
-    ed.created_at
-FROM event_data ed
-JOIN website_event we 
-ON we.event_id = ed.website_event_id
-JOIN (SELECT website_event_id, string_value
-      FROM event_data
-      WHERE data_key ilike '%currency%') currency
-ON currency.website_event_id = ed.website_event_id
-WHERE ed.data_key ilike '%revenue%';
-
------------------------------------------------------
--- MySQL
------------------------------------------------------
 INSERT INTO `revenue`
-SELECT UUID() revenue_id,
+SELECT lower(
+      hex(randomblob(4))
+      || '-' || hex(randomblob(2))
+      || '-' || '4' || substr(hex(randomblob(2)), 2)
+      || '-' || substr('89AB', 1 + (abs(random()) % 4) , 1)  || substr(hex(randomblob(2)), 2)
+      || '-' || hex(randomblob(6))
+    ) revenue_id,
     ed.website_id,
     we.session_id,
     we.event_id,
diff --git a/scripts/sqlite-vacuum.js b/scripts/sqlite-vacuum.js
new file mode 100644
index 00000000..9f55049b
--- /dev/null
+++ b/scripts/sqlite-vacuum.js
@@ -0,0 +1,10 @@
+require('dotenv').config();
+const { PrismaClient } = require('@prisma/client');
+
+const prisma = new PrismaClient();
+
+(async () => {
+  await prisma.$connect();
+  await prisma.$executeRaw`VACUUM`;
+  prisma.$disconnect();
+})();
diff --git a/src/lib/db.ts b/src/lib/db.ts
index 0ffedd0d..856ab92f 100644
--- a/src/lib/db.ts
+++ b/src/lib/db.ts
@@ -1,6 +1,7 @@
 export const PRISMA = 'prisma';
 export const POSTGRESQL = 'postgresql';
 export const MYSQL = 'mysql';
+export const SQLITE = 'sqlite';
 export const CLICKHOUSE = 'clickhouse';
 export const KAFKA = 'kafka';
 export const KAFKA_PRODUCER = 'kafka-producer';
@@ -13,6 +14,10 @@ BigInt.prototype['toJSON'] = function () {
 export function getDatabaseType(url = process.env.DATABASE_URL) {
   const type = url && url.split(':')[0];
 
+  if (type === 'file') {
+    return SQLITE;
+  }
+
   if (type === 'postgres') {
     return POSTGRESQL;
   }
@@ -21,6 +26,12 @@ export function getDatabaseType(url = process.env.DATABASE_URL) {
 }
 
 export async function runQuery(queries: any) {
+  const db = getDatabaseType();
+
+  if (db === SQLITE || db === POSTGRESQL || db === MYSQL) {
+    return queries[PRISMA]();
+  }
+
   if (process.env.CLICKHOUSE_URL) {
     if (queries[KAFKA]) {
       return queries[KAFKA]();
@@ -28,12 +39,6 @@ export async function runQuery(queries: any) {
 
     return queries[CLICKHOUSE]();
   }
-
-  const db = getDatabaseType();
-
-  if (db === POSTGRESQL || db === MYSQL) {
-    return queries[PRISMA]();
-  }
 }
 
 export function notImplemented() {
diff --git a/src/lib/prisma.ts b/src/lib/prisma.ts
index 273d63fa..863c3331 100644
--- a/src/lib/prisma.ts
+++ b/src/lib/prisma.ts
@@ -2,7 +2,7 @@ import debug from 'debug';
 import { PrismaClient } from '@prisma/client';
 import { readReplicas } from '@prisma/extension-read-replicas';
 import { formatInTimeZone } from 'date-fns-tz';
-import { MYSQL, POSTGRESQL, getDatabaseType } from '@/lib/db';
+import { MYSQL, POSTGRESQL, SQLITE, getDatabaseType } from '@/lib/db';
 import { SESSION_COLUMNS, OPERATORS, DEFAULT_PAGE_SIZE } from './constants';
 import { fetchWebsite } from './load';
 import { maxDate } from './date';
@@ -37,9 +37,21 @@ const POSTGRESQL_DATE_FORMATS = {
   year: 'YYYY-01-01 HH24:00:00',
 };
 
+const SQLITE_DATE_FORMATS = {
+  minute: '%Y-%m-%d %H:%M:00',
+  hour: '%Y-%m-%d %H:00:00',
+  day: '%Y-%m-%d 00:00:00',
+  month: '%Y-%m-01 00:00:00',
+  year: '%Y-01-01 00:00:00',
+};
+
 function getAddIntervalQuery(field: string, interval: string): string {
   const db = getDatabaseType();
 
+  if (db === SQLITE) {
+    return `strftime('%s', ${field} / 1000, 'unixepoch', '${interval}')`;
+  }
+
   if (db === POSTGRESQL) {
     return `${field} + interval '${interval}'`;
   }
@@ -52,6 +64,10 @@ function getAddIntervalQuery(field: string, interval: string): string {
 function getDayDiffQuery(field1: string, field2: string): string {
   const db = getDatabaseType();
 
+  if (db === SQLITE) {
+    return `(unixepoch(${field1}) - unixepoch(${field2})) / 86400`;
+  }
+
   if (db === POSTGRESQL) {
     return `${field1}::date - ${field2}::date`;
   }
@@ -64,6 +80,10 @@ function getDayDiffQuery(field1: string, field2: string): string {
 function getCastColumnQuery(field: string, type: string): string {
   const db = getDatabaseType();
 
+  if (db === SQLITE) {
+    return `CAST(${field} as ${type})`;
+  }
+
   if (db === POSTGRESQL) {
     return `${field}::${type}`;
   }
@@ -73,9 +93,27 @@ function getCastColumnQuery(field: string, type: string): string {
   }
 }
 
+function getISODateSQL(field: string): string {
+  const db = getDatabaseType();
+
+  if (db === SQLITE) {
+    return `strftime('%Y-%m-%dT%H:%M:%SZ', ${field} /1000, 'unixepoch')`;
+  } else {
+    return field;
+  }
+}
+
 function getDateSQL(field: string, unit: string, timezone?: string): string {
   const db = getDatabaseType();
 
+  if (db === SQLITE) {
+    if(timezone) {
+      const tz = formatInTimeZone(new Date(), timezone, 'xxx').substring(0, 3);
+      return `strftime('${SQLITE_DATE_FORMATS[unit]}', ${field} / 1000, 'unixepoch', '${tz} hours')`;
+    }
+    return `strftime('${SQLITE_DATE_FORMATS[unit]}', ${field} /1000, 'unixepoch')`;
+  }
+
   if (db === POSTGRESQL) {
     if (timezone) {
       return `to_char(date_trunc('${unit}', ${field} at time zone '${timezone}'), '${POSTGRESQL_DATE_FORMATS[unit]}')`;
@@ -95,6 +133,11 @@ function getDateSQL(field: string, unit: string, timezone?: string): string {
 function getDateWeeklySQL(field: string, timezone?: string) {
   const db = getDatabaseType();
 
+  if (db === SQLITE) {
+    const tz = formatInTimeZone(new Date(), timezone, 'xxx').substring(0, 3);
+    return `strftime('%w:%H', ${field} /1000, 'unixepoch', '${tz} hours')`;
+  }
+
   if (db === POSTGRESQL) {
     return `concat(extract(dow from (${field} at time zone '${timezone}')), ':', to_char((${field} at time zone '${timezone}'), 'HH24'))`;
   }
@@ -108,6 +151,10 @@ function getDateWeeklySQL(field: string, timezone?: string) {
 export function getTimestampSQL(field: string) {
   const db = getDatabaseType();
 
+  if (db === SQLITE) {
+    return `${field} / 1000`;
+  }
+
   if (db === POSTGRESQL) {
     return `floor(extract(epoch from ${field}))`;
   }
@@ -120,6 +167,10 @@ export function getTimestampSQL(field: string) {
 function getTimestampDiffSQL(field1: string, field2: string): string {
   const db = getDatabaseType();
 
+  if (db === SQLITE) {
+    return `(${field2} - ${field1}) / 1000`;
+  }
+
   if (db === POSTGRESQL) {
     return `floor(extract(epoch from (${field2} - ${field1})))`;
   }
@@ -287,7 +338,7 @@ async function rawQuery(sql: string, data: object): Promise<any> {
   const db = getDatabaseType();
   const params = [];
 
-  if (db !== POSTGRESQL && db !== MYSQL) {
+  if (db !== SQLITE && db !== POSTGRESQL && db !== MYSQL) {
     return Promise.reject(new Error('Unknown database.'));
   }
 
@@ -298,7 +349,7 @@ async function rawQuery(sql: string, data: object): Promise<any> {
 
     params.push(value);
 
-    return db === MYSQL ? '?' : `$${params.length}${type ?? ''}`;
+    return db !== POSTGRESQL ? '?' : `$${params.length}${type ?? ''}`;
   });
 
   return process.env.DATABASE_REPLICA_URL
@@ -447,6 +498,7 @@ export default {
   getDateSQL,
   getDateWeeklySQL,
   getFilterQuery,
+  getISODateSQL,
   getSearchParameters,
   getTimestampDiffSQL,
   getSearchSQL,
diff --git a/src/queries/prisma/team.ts b/src/queries/prisma/team.ts
index 9862fff2..08b6a492 100644
--- a/src/queries/prisma/team.ts
+++ b/src/queries/prisma/team.ts
@@ -106,10 +106,7 @@ export async function updateTeam(teamId: string, data: Prisma.TeamUpdateInput):
     where: {
       id: teamId,
     },
-    data: {
-      ...data,
-      updatedAt: new Date(),
-    },
+    data,
   });
 }
 
diff --git a/src/queries/sql/events/getWebsiteEvents.ts b/src/queries/sql/events/getWebsiteEvents.ts
index 0cbc6ac6..869297d5 100644
--- a/src/queries/sql/events/getWebsiteEvents.ts
+++ b/src/queries/sql/events/getWebsiteEvents.ts
@@ -13,7 +13,7 @@ export function getWebsiteEvents(
 }
 
 async function relationalQuery(websiteId: string, filters: QueryFilters, pageParams?: PageParams) {
-  const { pagedRawQuery, parseFilters } = prisma;
+  const { pagedRawQuery, parseFilters, getISODateSQL } = prisma;
   const { search } = pageParams;
   const { filterQuery, cohortQuery, params } = await parseFilters(websiteId, {
     ...filters,
@@ -28,7 +28,7 @@ async function relationalQuery(websiteId: string, filters: QueryFilters, pagePar
       event_id as "id",
       website_id as "websiteId", 
       session_id as "sessionId",
-      created_at as "createdAt",
+      ${getISODateSQL('created_at')} as "createdAt",
       url_path as "urlPath",
       url_query as "urlQuery",
       referrer_path as "referrerPath",
diff --git a/src/queries/sql/getRealtimeActivity.ts b/src/queries/sql/getRealtimeActivity.ts
index 8892732a..4f040ce3 100644
--- a/src/queries/sql/getRealtimeActivity.ts
+++ b/src/queries/sql/getRealtimeActivity.ts
@@ -11,7 +11,7 @@ export async function getRealtimeActivity(...args: [websiteId: string, filters:
 }
 
 async function relationalQuery(websiteId: string, filters: QueryFilters) {
-  const { rawQuery, parseFilters } = prisma;
+  const { rawQuery, parseFilters, getISODateSQL } = prisma;
   const { params, filterQuery, cohortQuery, dateQuery } = await parseFilters(websiteId, filters);
 
   return rawQuery(
@@ -19,7 +19,7 @@ async function relationalQuery(websiteId: string, filters: QueryFilters) {
     select
         website_event.session_id as "sessionId",
         website_event.event_name as "eventName",
-        website_event.created_at as "createdAt",
+        ${getISODateSQL('website_event.created_at')} as "createdAt",
         session.browser,
         session.os,
         session.device,
diff --git a/src/queries/sql/getWebsiteDateRange.ts b/src/queries/sql/getWebsiteDateRange.ts
index 953fa5eb..fb924655 100644
--- a/src/queries/sql/getWebsiteDateRange.ts
+++ b/src/queries/sql/getWebsiteDateRange.ts
@@ -11,14 +11,14 @@ export async function getWebsiteDateRange(...args: [websiteId: string]) {
 }
 
 async function relationalQuery(websiteId: string) {
-  const { rawQuery, parseFilters } = prisma;
+  const { rawQuery, parseFilters, getISODateSQL } = prisma;
   const { params } = await parseFilters(websiteId, { startDate: new Date(DEFAULT_RESET_DATE) });
 
   const result = await rawQuery(
     `
     select
-      min(created_at) as mindate,
-      max(created_at) as maxdate
+      ${getISODateSQL('min(created_at)')} as mindate,
+      ${getISODateSQL('max(created_at)')} as maxdate
     from website_event
     where website_id = {{websiteId::uuid}}
       and created_at >= {{startDate}}
diff --git a/src/queries/sql/sessions/getSessionData.ts b/src/queries/sql/sessions/getSessionData.ts
index a3f1e113..4df47451 100644
--- a/src/queries/sql/sessions/getSessionData.ts
+++ b/src/queries/sql/sessions/getSessionData.ts
@@ -10,7 +10,7 @@ export async function getSessionData(...args: [websiteId: string, sessionId: str
 }
 
 async function relationalQuery(websiteId: string, sessionId: string) {
-  const { rawQuery } = prisma;
+  const { rawQuery, getISODateSQL } = prisma;
 
   return rawQuery(
     `
@@ -21,8 +21,8 @@ async function relationalQuery(websiteId: string, sessionId: string) {
         data_type as "dataType",
         replace(string_value, '.0000', '') as "stringValue",
         number_value as "numberValue",
-        date_value as "dateValue",
-        created_at as "createdAt"
+        ${getISODateSQL('date_value')} as "dateValue",
+        ${getISODateSQL('created_at')} as "createdAt"
     from session_data
     where website_id = {{websiteId::uuid}}
       and session_id = {{sessionId::uuid}}
diff --git a/src/queries/sql/sessions/getWebsiteSession.ts b/src/queries/sql/sessions/getWebsiteSession.ts
index 8c549ca3..0664bfd9 100644
--- a/src/queries/sql/sessions/getWebsiteSession.ts
+++ b/src/queries/sql/sessions/getWebsiteSession.ts
@@ -10,7 +10,7 @@ export async function getWebsiteSession(...args: [websiteId: string, sessionId:
 }
 
 async function relationalQuery(websiteId: string, sessionId: string) {
-  const { rawQuery, getTimestampDiffSQL } = prisma;
+  const { rawQuery, getTimestampDiffSQL, getISODateSQL } = prisma;
 
   return rawQuery(
     `
@@ -25,8 +25,8 @@ async function relationalQuery(websiteId: string, sessionId: string) {
       country,
       region,
       city,
-      min(min_time) as "firstAt",
-      max(max_time) as "lastAt",
+      ${getISODateSQL('min(min_time)')} as "firstAt",
+      ${getISODateSQL('max(max_time)')} as "lastAt",
       count(distinct visit_id) as visits,
       sum(views) as views,
       sum(events) as events,
diff --git a/src/queries/sql/sessions/getWebsiteSessions.ts b/src/queries/sql/sessions/getWebsiteSessions.ts
index db2ea5aa..aa062768 100644
--- a/src/queries/sql/sessions/getWebsiteSessions.ts
+++ b/src/queries/sql/sessions/getWebsiteSessions.ts
@@ -14,7 +14,7 @@ export async function getWebsiteSessions(
 }
 
 async function relationalQuery(websiteId: string, filters: QueryFilters, pageParams: PageParams) {
-  const { pagedRawQuery, parseFilters } = prisma;
+  const { pagedRawQuery, parseFilters, getISODateSQL } = prisma;
   const { search } = pageParams;
   const { filterQuery, cohortQuery, params } = await parseFilters(websiteId, {
     ...filters,
@@ -36,11 +36,11 @@ async function relationalQuery(websiteId: string, filters: QueryFilters, pagePar
       session.country,
       session.region,
       session.city,
-      min(website_event.created_at) as "firstAt",
-      max(website_event.created_at) as "lastAt",
+      ${getISODateSQL('min(website_event.created_at)')} as "firstAt",
+      ${getISODateSQL('max(website_event.created_at)')} as "lastAt",
       count(distinct website_event.visit_id) as "visits",
       sum(case when website_event.event_type = 1 then 1 else 0 end) as "views",
-      max(website_event.created_at) as "createdAt"
+      ${getISODateSQL('max(website_event.created_at)')} as "createdAt"
     from website_event 
     ${cohortQuery}
     join session on session.session_id = website_event.session_id
-- 
